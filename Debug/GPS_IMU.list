
GPS_IMU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004880  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08004a58  08004a58  00005a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004acc  08004acc  00006034  2**0
                  CONTENTS
  4 .ARM          00000008  08004acc  08004acc  00005acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ad4  08004ad4  00006034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ad4  08004ad4  00005ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004ad8  08004ad8  00005ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000034  20000000  08004adc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000288  20000034  08004b10  00006034  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002bc  08004b10  000062bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fc3f  00000000  00000000  00006064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002402  00000000  00000000  00015ca3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c98  00000000  00000000  000180a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009a4  00000000  00000000  00018d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025b79  00000000  00000000  000196e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000106a2  00000000  00000000  0003f25d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee07a  00000000  00000000  0004f8ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013d979  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003308  00000000  00000000  0013d9bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00140cc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000034 	.word	0x20000034
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004a40 	.word	0x08004a40

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000038 	.word	0x20000038
 8000214:	08004a40 	.word	0x08004a40

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800050e:	4b12      	ldr	r3, [pc, #72]	@ (8000558 <MX_DMA_Init+0x50>)
 8000510:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000512:	4a11      	ldr	r2, [pc, #68]	@ (8000558 <MX_DMA_Init+0x50>)
 8000514:	f043 0304 	orr.w	r3, r3, #4
 8000518:	6493      	str	r3, [r2, #72]	@ 0x48
 800051a:	4b0f      	ldr	r3, [pc, #60]	@ (8000558 <MX_DMA_Init+0x50>)
 800051c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800051e:	f003 0304 	and.w	r3, r3, #4
 8000522:	607b      	str	r3, [r7, #4]
 8000524:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000526:	4b0c      	ldr	r3, [pc, #48]	@ (8000558 <MX_DMA_Init+0x50>)
 8000528:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800052a:	4a0b      	ldr	r2, [pc, #44]	@ (8000558 <MX_DMA_Init+0x50>)
 800052c:	f043 0301 	orr.w	r3, r3, #1
 8000530:	6493      	str	r3, [r2, #72]	@ 0x48
 8000532:	4b09      	ldr	r3, [pc, #36]	@ (8000558 <MX_DMA_Init+0x50>)
 8000534:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000536:	f003 0301 	and.w	r3, r3, #1
 800053a:	603b      	str	r3, [r7, #0]
 800053c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800053e:	2200      	movs	r2, #0
 8000540:	2100      	movs	r1, #0
 8000542:	200b      	movs	r0, #11
 8000544:	f000 fda3 	bl	800108e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000548:	200b      	movs	r0, #11
 800054a:	f000 fdba 	bl	80010c2 <HAL_NVIC_EnableIRQ>

}
 800054e:	bf00      	nop
 8000550:	3708      	adds	r7, #8
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	40021000 	.word	0x40021000

0800055c <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000560:	4b20      	ldr	r3, [pc, #128]	@ (80005e4 <MX_FDCAN1_Init+0x88>)
 8000562:	4a21      	ldr	r2, [pc, #132]	@ (80005e8 <MX_FDCAN1_Init+0x8c>)
 8000564:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000566:	4b1f      	ldr	r3, [pc, #124]	@ (80005e4 <MX_FDCAN1_Init+0x88>)
 8000568:	2200      	movs	r2, #0
 800056a:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 800056c:	4b1d      	ldr	r3, [pc, #116]	@ (80005e4 <MX_FDCAN1_Init+0x88>)
 800056e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000572:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000574:	4b1b      	ldr	r3, [pc, #108]	@ (80005e4 <MX_FDCAN1_Init+0x88>)
 8000576:	2200      	movs	r2, #0
 8000578:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800057a:	4b1a      	ldr	r3, [pc, #104]	@ (80005e4 <MX_FDCAN1_Init+0x88>)
 800057c:	2200      	movs	r2, #0
 800057e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000580:	4b18      	ldr	r3, [pc, #96]	@ (80005e4 <MX_FDCAN1_Init+0x88>)
 8000582:	2200      	movs	r2, #0
 8000584:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000586:	4b17      	ldr	r3, [pc, #92]	@ (80005e4 <MX_FDCAN1_Init+0x88>)
 8000588:	2200      	movs	r2, #0
 800058a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 2;
 800058c:	4b15      	ldr	r3, [pc, #84]	@ (80005e4 <MX_FDCAN1_Init+0x88>)
 800058e:	2202      	movs	r2, #2
 8000590:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 8000592:	4b14      	ldr	r3, [pc, #80]	@ (80005e4 <MX_FDCAN1_Init+0x88>)
 8000594:	2202      	movs	r2, #2
 8000596:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 31;
 8000598:	4b12      	ldr	r3, [pc, #72]	@ (80005e4 <MX_FDCAN1_Init+0x88>)
 800059a:	221f      	movs	r2, #31
 800059c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 8;
 800059e:	4b11      	ldr	r3, [pc, #68]	@ (80005e4 <MX_FDCAN1_Init+0x88>)
 80005a0:	2208      	movs	r2, #8
 80005a2:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 2;
 80005a4:	4b0f      	ldr	r3, [pc, #60]	@ (80005e4 <MX_FDCAN1_Init+0x88>)
 80005a6:	2202      	movs	r2, #2
 80005a8:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80005aa:	4b0e      	ldr	r3, [pc, #56]	@ (80005e4 <MX_FDCAN1_Init+0x88>)
 80005ac:	2201      	movs	r2, #1
 80005ae:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 80005b0:	4b0c      	ldr	r3, [pc, #48]	@ (80005e4 <MX_FDCAN1_Init+0x88>)
 80005b2:	2205      	movs	r2, #5
 80005b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 80005b6:	4b0b      	ldr	r3, [pc, #44]	@ (80005e4 <MX_FDCAN1_Init+0x88>)
 80005b8:	2202      	movs	r2, #2
 80005ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 80005bc:	4b09      	ldr	r3, [pc, #36]	@ (80005e4 <MX_FDCAN1_Init+0x88>)
 80005be:	2201      	movs	r2, #1
 80005c0:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80005c2:	4b08      	ldr	r3, [pc, #32]	@ (80005e4 <MX_FDCAN1_Init+0x88>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80005c8:	4b06      	ldr	r3, [pc, #24]	@ (80005e4 <MX_FDCAN1_Init+0x88>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80005ce:	4805      	ldr	r0, [pc, #20]	@ (80005e4 <MX_FDCAN1_Init+0x88>)
 80005d0:	f001 f8c4 	bl	800175c <HAL_FDCAN_Init>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 80005da:	f000 f923 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	20000050 	.word	0x20000050
 80005e8:	40006400 	.word	0x40006400

080005ec <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b09e      	sub	sp, #120	@ 0x78
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000604:	f107 0310 	add.w	r3, r7, #16
 8000608:	2254      	movs	r2, #84	@ 0x54
 800060a:	2100      	movs	r1, #0
 800060c:	4618      	mov	r0, r3
 800060e:	f004 f9dd 	bl	80049cc <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4a20      	ldr	r2, [pc, #128]	@ (8000698 <HAL_FDCAN_MspInit+0xac>)
 8000618:	4293      	cmp	r3, r2
 800061a:	d139      	bne.n	8000690 <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800061c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000620:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000622:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000626:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000628:	f107 0310 	add.w	r3, r7, #16
 800062c:	4618      	mov	r0, r3
 800062e:	f002 faa7 	bl	8002b80 <HAL_RCCEx_PeriphCLKConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000638:	f000 f8f4 	bl	8000824 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800063c:	4b17      	ldr	r3, [pc, #92]	@ (800069c <HAL_FDCAN_MspInit+0xb0>)
 800063e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000640:	4a16      	ldr	r2, [pc, #88]	@ (800069c <HAL_FDCAN_MspInit+0xb0>)
 8000642:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000646:	6593      	str	r3, [r2, #88]	@ 0x58
 8000648:	4b14      	ldr	r3, [pc, #80]	@ (800069c <HAL_FDCAN_MspInit+0xb0>)
 800064a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800064c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000650:	60fb      	str	r3, [r7, #12]
 8000652:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000654:	4b11      	ldr	r3, [pc, #68]	@ (800069c <HAL_FDCAN_MspInit+0xb0>)
 8000656:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000658:	4a10      	ldr	r2, [pc, #64]	@ (800069c <HAL_FDCAN_MspInit+0xb0>)
 800065a:	f043 0301 	orr.w	r3, r3, #1
 800065e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000660:	4b0e      	ldr	r3, [pc, #56]	@ (800069c <HAL_FDCAN_MspInit+0xb0>)
 8000662:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000664:	f003 0301 	and.w	r3, r3, #1
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800066c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000670:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000672:	2302      	movs	r3, #2
 8000674:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000676:	2300      	movs	r3, #0
 8000678:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067a:	2300      	movs	r3, #0
 800067c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800067e:	2309      	movs	r3, #9
 8000680:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000682:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000686:	4619      	mov	r1, r3
 8000688:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800068c:	f001 fb14 	bl	8001cb8 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8000690:	bf00      	nop
 8000692:	3778      	adds	r7, #120	@ 0x78
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	40006400 	.word	0x40006400
 800069c:	40021000 	.word	0x40021000

080006a0 <sendCANMessage>:
  }
}

/* USER CODE BEGIN 1 */
void sendCANMessage(const uint8_t *can_message)
{
 80006a0:	b5b0      	push	{r4, r5, r7, lr}
 80006a2:	b08c      	sub	sp, #48	@ 0x30
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
	FDCAN_TxHeaderTypeDef can_header = {
 80006a8:	4b0a      	ldr	r3, [pc, #40]	@ (80006d4 <sendCANMessage+0x34>)
 80006aa:	f107 040c 	add.w	r4, r7, #12
 80006ae:	461d      	mov	r5, r3
 80006b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006b8:	682b      	ldr	r3, [r5, #0]
 80006ba:	6023      	str	r3, [r4, #0]
	            .FDFormat = FDCAN_FD_CAN,
	            .TxEventFifoControl = FDCAN_NO_TX_EVENTS,
	            .MessageMarker = 0
	};

	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &can_header, can_message);
 80006bc:	f107 030c 	add.w	r3, r7, #12
 80006c0:	687a      	ldr	r2, [r7, #4]
 80006c2:	4619      	mov	r1, r3
 80006c4:	4804      	ldr	r0, [pc, #16]	@ (80006d8 <sendCANMessage+0x38>)
 80006c6:	f001 f9cb 	bl	8001a60 <HAL_FDCAN_AddMessageToTxFifoQ>

}
 80006ca:	bf00      	nop
 80006cc:	3730      	adds	r7, #48	@ 0x30
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bdb0      	pop	{r4, r5, r7, pc}
 80006d2:	bf00      	nop
 80006d4:	08004a58 	.word	0x08004a58
 80006d8:	20000050 	.word	0x20000050

080006dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	b085      	sub	sp, #20
 80006e0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006e2:	4b1b      	ldr	r3, [pc, #108]	@ (8000750 <MX_GPIO_Init+0x74>)
 80006e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006e6:	4a1a      	ldr	r2, [pc, #104]	@ (8000750 <MX_GPIO_Init+0x74>)
 80006e8:	f043 0320 	orr.w	r3, r3, #32
 80006ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006ee:	4b18      	ldr	r3, [pc, #96]	@ (8000750 <MX_GPIO_Init+0x74>)
 80006f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006f2:	f003 0320 	and.w	r3, r3, #32
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fa:	4b15      	ldr	r3, [pc, #84]	@ (8000750 <MX_GPIO_Init+0x74>)
 80006fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006fe:	4a14      	ldr	r2, [pc, #80]	@ (8000750 <MX_GPIO_Init+0x74>)
 8000700:	f043 0301 	orr.w	r3, r3, #1
 8000704:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000706:	4b12      	ldr	r3, [pc, #72]	@ (8000750 <MX_GPIO_Init+0x74>)
 8000708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800070a:	f003 0301 	and.w	r3, r3, #1
 800070e:	60bb      	str	r3, [r7, #8]
 8000710:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000712:	4b0f      	ldr	r3, [pc, #60]	@ (8000750 <MX_GPIO_Init+0x74>)
 8000714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000716:	4a0e      	ldr	r2, [pc, #56]	@ (8000750 <MX_GPIO_Init+0x74>)
 8000718:	f043 0304 	orr.w	r3, r3, #4
 800071c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800071e:	4b0c      	ldr	r3, [pc, #48]	@ (8000750 <MX_GPIO_Init+0x74>)
 8000720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000722:	f003 0304 	and.w	r3, r3, #4
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800072a:	4b09      	ldr	r3, [pc, #36]	@ (8000750 <MX_GPIO_Init+0x74>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800072e:	4a08      	ldr	r2, [pc, #32]	@ (8000750 <MX_GPIO_Init+0x74>)
 8000730:	f043 0302 	orr.w	r3, r3, #2
 8000734:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000736:	4b06      	ldr	r3, [pc, #24]	@ (8000750 <MX_GPIO_Init+0x74>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800073a:	f003 0302 	and.w	r3, r3, #2
 800073e:	603b      	str	r3, [r7, #0]
 8000740:	683b      	ldr	r3, [r7, #0]

}
 8000742:	bf00      	nop
 8000744:	3714      	adds	r7, #20
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	40021000 	.word	0x40021000

08000754 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000758:	f000 fb2b 	bl	8000db2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800075c:	f000 f818 	bl	8000790 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000760:	f7ff ffbc 	bl	80006dc <MX_GPIO_Init>
  MX_DMA_Init();
 8000764:	f7ff fed0 	bl	8000508 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8000768:	f7ff fef8 	bl	800055c <MX_FDCAN1_Init>
  MX_USART1_UART_Init();
 800076c:	f000 f8da 	bl	8000924 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000770:	f000 f924 	bl	80009bc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //Start FDCAN
  HAL_FDCAN_Start(&hfdcan1);
 8000774:	4805      	ldr	r0, [pc, #20]	@ (800078c <main+0x38>)
 8000776:	f001 f94b 	bl	8001a10 <HAL_FDCAN_Start>
  // Wait for GPS to start
  HAL_Delay(10000);
 800077a:	f242 7010 	movw	r0, #10000	@ 0x2710
 800077e:	f000 fb89 	bl	8000e94 <HAL_Delay>
  // LOG_BESTPOS command

  start_bestpos();
 8000782:	f000 fa37 	bl	8000bf4 <start_bestpos>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000786:	bf00      	nop
 8000788:	e7fd      	b.n	8000786 <main+0x32>
 800078a:	bf00      	nop
 800078c:	20000050 	.word	0x20000050

08000790 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b094      	sub	sp, #80	@ 0x50
 8000794:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000796:	f107 0318 	add.w	r3, r7, #24
 800079a:	2238      	movs	r2, #56	@ 0x38
 800079c:	2100      	movs	r1, #0
 800079e:	4618      	mov	r0, r3
 80007a0:	f004 f914 	bl	80049cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a4:	1d3b      	adds	r3, r7, #4
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]
 80007b0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80007b2:	2000      	movs	r0, #0
 80007b4:	f001 fc02 	bl	8001fbc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007b8:	2301      	movs	r3, #1
 80007ba:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007c0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c2:	2302      	movs	r3, #2
 80007c4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007c6:	2303      	movs	r3, #3
 80007c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV3;
 80007ca:	2303      	movs	r3, #3
 80007cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 80007ce:	2328      	movs	r3, #40	@ 0x28
 80007d0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007d2:	2302      	movs	r3, #2
 80007d4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007d6:	2302      	movs	r3, #2
 80007d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007da:	2302      	movs	r3, #2
 80007dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007de:	f107 0318 	add.w	r3, r7, #24
 80007e2:	4618      	mov	r0, r3
 80007e4:	f001 fc9e 	bl	8002124 <HAL_RCC_OscConfig>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80007ee:	f000 f819 	bl	8000824 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f2:	230f      	movs	r3, #15
 80007f4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f6:	2303      	movs	r3, #3
 80007f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000802:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000808:	1d3b      	adds	r3, r7, #4
 800080a:	2104      	movs	r1, #4
 800080c:	4618      	mov	r0, r3
 800080e:	f001 ff9b 	bl	8002748 <HAL_RCC_ClockConfig>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000818:	f000 f804 	bl	8000824 <Error_Handler>
  }
}
 800081c:	bf00      	nop
 800081e:	3750      	adds	r7, #80	@ 0x50
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}

08000824 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000828:	b672      	cpsid	i
}
 800082a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800082c:	bf00      	nop
 800082e:	e7fd      	b.n	800082c <Error_Handler+0x8>

08000830 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000836:	4b0f      	ldr	r3, [pc, #60]	@ (8000874 <HAL_MspInit+0x44>)
 8000838:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800083a:	4a0e      	ldr	r2, [pc, #56]	@ (8000874 <HAL_MspInit+0x44>)
 800083c:	f043 0301 	orr.w	r3, r3, #1
 8000840:	6613      	str	r3, [r2, #96]	@ 0x60
 8000842:	4b0c      	ldr	r3, [pc, #48]	@ (8000874 <HAL_MspInit+0x44>)
 8000844:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800084e:	4b09      	ldr	r3, [pc, #36]	@ (8000874 <HAL_MspInit+0x44>)
 8000850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000852:	4a08      	ldr	r2, [pc, #32]	@ (8000874 <HAL_MspInit+0x44>)
 8000854:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000858:	6593      	str	r3, [r2, #88]	@ 0x58
 800085a:	4b06      	ldr	r3, [pc, #24]	@ (8000874 <HAL_MspInit+0x44>)
 800085c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800085e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000862:	603b      	str	r3, [r7, #0]
 8000864:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000866:	f001 fc4d 	bl	8002104 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40021000 	.word	0x40021000

08000878 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800087c:	bf00      	nop
 800087e:	e7fd      	b.n	800087c <NMI_Handler+0x4>

08000880 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000884:	bf00      	nop
 8000886:	e7fd      	b.n	8000884 <HardFault_Handler+0x4>

08000888 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800088c:	bf00      	nop
 800088e:	e7fd      	b.n	800088c <MemManage_Handler+0x4>

08000890 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000894:	bf00      	nop
 8000896:	e7fd      	b.n	8000894 <BusFault_Handler+0x4>

08000898 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800089c:	bf00      	nop
 800089e:	e7fd      	b.n	800089c <UsageFault_Handler+0x4>

080008a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008a4:	bf00      	nop
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr

080008ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ae:	b480      	push	{r7}
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008b2:	bf00      	nop
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr

080008bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr

080008ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ce:	f000 fac3 	bl	8000e58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
	...

080008d8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80008dc:	4802      	ldr	r0, [pc, #8]	@ (80008e8 <DMA1_Channel1_IRQHandler+0x10>)
 80008de:	f000 fdee 	bl	80014be <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000258 	.word	0x20000258

080008ec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80008f0:	4802      	ldr	r0, [pc, #8]	@ (80008fc <USART1_IRQHandler+0x10>)
 80008f2:	f002 fc71 	bl	80031d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000130 	.word	0x20000130

08000900 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000904:	4b06      	ldr	r3, [pc, #24]	@ (8000920 <SystemInit+0x20>)
 8000906:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800090a:	4a05      	ldr	r2, [pc, #20]	@ (8000920 <SystemInit+0x20>)
 800090c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000910:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	e000ed00 	.word	0xe000ed00

08000924 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000928:	4b22      	ldr	r3, [pc, #136]	@ (80009b4 <MX_USART1_UART_Init+0x90>)
 800092a:	4a23      	ldr	r2, [pc, #140]	@ (80009b8 <MX_USART1_UART_Init+0x94>)
 800092c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 800092e:	4b21      	ldr	r3, [pc, #132]	@ (80009b4 <MX_USART1_UART_Init+0x90>)
 8000930:	f44f 22e1 	mov.w	r2, #460800	@ 0x70800
 8000934:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000936:	4b1f      	ldr	r3, [pc, #124]	@ (80009b4 <MX_USART1_UART_Init+0x90>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800093c:	4b1d      	ldr	r3, [pc, #116]	@ (80009b4 <MX_USART1_UART_Init+0x90>)
 800093e:	2200      	movs	r2, #0
 8000940:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000942:	4b1c      	ldr	r3, [pc, #112]	@ (80009b4 <MX_USART1_UART_Init+0x90>)
 8000944:	2200      	movs	r2, #0
 8000946:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000948:	4b1a      	ldr	r3, [pc, #104]	@ (80009b4 <MX_USART1_UART_Init+0x90>)
 800094a:	220c      	movs	r2, #12
 800094c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800094e:	4b19      	ldr	r3, [pc, #100]	@ (80009b4 <MX_USART1_UART_Init+0x90>)
 8000950:	2200      	movs	r2, #0
 8000952:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000954:	4b17      	ldr	r3, [pc, #92]	@ (80009b4 <MX_USART1_UART_Init+0x90>)
 8000956:	2200      	movs	r2, #0
 8000958:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800095a:	4b16      	ldr	r3, [pc, #88]	@ (80009b4 <MX_USART1_UART_Init+0x90>)
 800095c:	2200      	movs	r2, #0
 800095e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000960:	4b14      	ldr	r3, [pc, #80]	@ (80009b4 <MX_USART1_UART_Init+0x90>)
 8000962:	2200      	movs	r2, #0
 8000964:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000966:	4b13      	ldr	r3, [pc, #76]	@ (80009b4 <MX_USART1_UART_Init+0x90>)
 8000968:	2200      	movs	r2, #0
 800096a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800096c:	4811      	ldr	r0, [pc, #68]	@ (80009b4 <MX_USART1_UART_Init+0x90>)
 800096e:	f002 fb55 	bl	800301c <HAL_UART_Init>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000978:	f7ff ff54 	bl	8000824 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800097c:	2100      	movs	r1, #0
 800097e:	480d      	ldr	r0, [pc, #52]	@ (80009b4 <MX_USART1_UART_Init+0x90>)
 8000980:	f003 ff06 	bl	8004790 <HAL_UARTEx_SetTxFifoThreshold>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800098a:	f7ff ff4b 	bl	8000824 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800098e:	2100      	movs	r1, #0
 8000990:	4808      	ldr	r0, [pc, #32]	@ (80009b4 <MX_USART1_UART_Init+0x90>)
 8000992:	f003 ff3b 	bl	800480c <HAL_UARTEx_SetRxFifoThreshold>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800099c:	f7ff ff42 	bl	8000824 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80009a0:	4804      	ldr	r0, [pc, #16]	@ (80009b4 <MX_USART1_UART_Init+0x90>)
 80009a2:	f003 febc 	bl	800471e <HAL_UARTEx_DisableFifoMode>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80009ac:	f7ff ff3a 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009b0:	bf00      	nop
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20000130 	.word	0x20000130
 80009b8:	40013800 	.word	0x40013800

080009bc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009c0:	4b22      	ldr	r3, [pc, #136]	@ (8000a4c <MX_USART2_UART_Init+0x90>)
 80009c2:	4a23      	ldr	r2, [pc, #140]	@ (8000a50 <MX_USART2_UART_Init+0x94>)
 80009c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009c6:	4b21      	ldr	r3, [pc, #132]	@ (8000a4c <MX_USART2_UART_Init+0x90>)
 80009c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009ce:	4b1f      	ldr	r3, [pc, #124]	@ (8000a4c <MX_USART2_UART_Init+0x90>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009d4:	4b1d      	ldr	r3, [pc, #116]	@ (8000a4c <MX_USART2_UART_Init+0x90>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009da:	4b1c      	ldr	r3, [pc, #112]	@ (8000a4c <MX_USART2_UART_Init+0x90>)
 80009dc:	2200      	movs	r2, #0
 80009de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009e0:	4b1a      	ldr	r3, [pc, #104]	@ (8000a4c <MX_USART2_UART_Init+0x90>)
 80009e2:	220c      	movs	r2, #12
 80009e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e6:	4b19      	ldr	r3, [pc, #100]	@ (8000a4c <MX_USART2_UART_Init+0x90>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ec:	4b17      	ldr	r3, [pc, #92]	@ (8000a4c <MX_USART2_UART_Init+0x90>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009f2:	4b16      	ldr	r3, [pc, #88]	@ (8000a4c <MX_USART2_UART_Init+0x90>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009f8:	4b14      	ldr	r3, [pc, #80]	@ (8000a4c <MX_USART2_UART_Init+0x90>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009fe:	4b13      	ldr	r3, [pc, #76]	@ (8000a4c <MX_USART2_UART_Init+0x90>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a04:	4811      	ldr	r0, [pc, #68]	@ (8000a4c <MX_USART2_UART_Init+0x90>)
 8000a06:	f002 fb09 	bl	800301c <HAL_UART_Init>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000a10:	f7ff ff08 	bl	8000824 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a14:	2100      	movs	r1, #0
 8000a16:	480d      	ldr	r0, [pc, #52]	@ (8000a4c <MX_USART2_UART_Init+0x90>)
 8000a18:	f003 feba 	bl	8004790 <HAL_UARTEx_SetTxFifoThreshold>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000a22:	f7ff feff 	bl	8000824 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a26:	2100      	movs	r1, #0
 8000a28:	4808      	ldr	r0, [pc, #32]	@ (8000a4c <MX_USART2_UART_Init+0x90>)
 8000a2a:	f003 feef 	bl	800480c <HAL_UARTEx_SetRxFifoThreshold>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000a34:	f7ff fef6 	bl	8000824 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a38:	4804      	ldr	r0, [pc, #16]	@ (8000a4c <MX_USART2_UART_Init+0x90>)
 8000a3a:	f003 fe70 	bl	800471e <HAL_UARTEx_DisableFifoMode>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000a44:	f7ff feee 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	200001c4 	.word	0x200001c4
 8000a50:	40004400 	.word	0x40004400

08000a54 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b0a0      	sub	sp, #128	@ 0x80
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a6c:	f107 0318 	add.w	r3, r7, #24
 8000a70:	2254      	movs	r2, #84	@ 0x54
 8000a72:	2100      	movs	r1, #0
 8000a74:	4618      	mov	r0, r3
 8000a76:	f003 ffa9 	bl	80049cc <memset>
  if(uartHandle->Instance==USART1)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4a57      	ldr	r2, [pc, #348]	@ (8000bdc <HAL_UART_MspInit+0x188>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d16a      	bne.n	8000b5a <HAL_UART_MspInit+0x106>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000a84:	2301      	movs	r3, #1
 8000a86:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a8c:	f107 0318 	add.w	r3, r7, #24
 8000a90:	4618      	mov	r0, r3
 8000a92:	f002 f875 	bl	8002b80 <HAL_RCCEx_PeriphCLKConfig>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a9c:	f7ff fec2 	bl	8000824 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000aa0:	4b4f      	ldr	r3, [pc, #316]	@ (8000be0 <HAL_UART_MspInit+0x18c>)
 8000aa2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000aa4:	4a4e      	ldr	r2, [pc, #312]	@ (8000be0 <HAL_UART_MspInit+0x18c>)
 8000aa6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000aaa:	6613      	str	r3, [r2, #96]	@ 0x60
 8000aac:	4b4c      	ldr	r3, [pc, #304]	@ (8000be0 <HAL_UART_MspInit+0x18c>)
 8000aae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ab0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ab4:	617b      	str	r3, [r7, #20]
 8000ab6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab8:	4b49      	ldr	r3, [pc, #292]	@ (8000be0 <HAL_UART_MspInit+0x18c>)
 8000aba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000abc:	4a48      	ldr	r2, [pc, #288]	@ (8000be0 <HAL_UART_MspInit+0x18c>)
 8000abe:	f043 0304 	orr.w	r3, r3, #4
 8000ac2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ac4:	4b46      	ldr	r3, [pc, #280]	@ (8000be0 <HAL_UART_MspInit+0x18c>)
 8000ac6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ac8:	f003 0304 	and.w	r3, r3, #4
 8000acc:	613b      	str	r3, [r7, #16]
 8000ace:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000ad0:	2330      	movs	r3, #48	@ 0x30
 8000ad2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000adc:	2300      	movs	r3, #0
 8000ade:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ae0:	2307      	movs	r3, #7
 8000ae2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ae4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000ae8:	4619      	mov	r1, r3
 8000aea:	483e      	ldr	r0, [pc, #248]	@ (8000be4 <HAL_UART_MspInit+0x190>)
 8000aec:	f001 f8e4 	bl	8001cb8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8000af0:	4b3d      	ldr	r3, [pc, #244]	@ (8000be8 <HAL_UART_MspInit+0x194>)
 8000af2:	4a3e      	ldr	r2, [pc, #248]	@ (8000bec <HAL_UART_MspInit+0x198>)
 8000af4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8000af6:	4b3c      	ldr	r3, [pc, #240]	@ (8000be8 <HAL_UART_MspInit+0x194>)
 8000af8:	2218      	movs	r2, #24
 8000afa:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000afc:	4b3a      	ldr	r3, [pc, #232]	@ (8000be8 <HAL_UART_MspInit+0x194>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b02:	4b39      	ldr	r3, [pc, #228]	@ (8000be8 <HAL_UART_MspInit+0x194>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b08:	4b37      	ldr	r3, [pc, #220]	@ (8000be8 <HAL_UART_MspInit+0x194>)
 8000b0a:	2280      	movs	r2, #128	@ 0x80
 8000b0c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b0e:	4b36      	ldr	r3, [pc, #216]	@ (8000be8 <HAL_UART_MspInit+0x194>)
 8000b10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b14:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b16:	4b34      	ldr	r3, [pc, #208]	@ (8000be8 <HAL_UART_MspInit+0x194>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000b1c:	4b32      	ldr	r3, [pc, #200]	@ (8000be8 <HAL_UART_MspInit+0x194>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000b22:	4b31      	ldr	r3, [pc, #196]	@ (8000be8 <HAL_UART_MspInit+0x194>)
 8000b24:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b28:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000b2a:	482f      	ldr	r0, [pc, #188]	@ (8000be8 <HAL_UART_MspInit+0x194>)
 8000b2c:	f000 fae4 	bl	80010f8 <HAL_DMA_Init>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8000b36:	f7ff fe75 	bl	8000824 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4a2a      	ldr	r2, [pc, #168]	@ (8000be8 <HAL_UART_MspInit+0x194>)
 8000b3e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8000b42:	4a29      	ldr	r2, [pc, #164]	@ (8000be8 <HAL_UART_MspInit+0x194>)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	2025      	movs	r0, #37	@ 0x25
 8000b4e:	f000 fa9e 	bl	800108e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b52:	2025      	movs	r0, #37	@ 0x25
 8000b54:	f000 fab5 	bl	80010c2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000b58:	e03b      	b.n	8000bd2 <HAL_UART_MspInit+0x17e>
  else if(uartHandle->Instance==USART2)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4a24      	ldr	r2, [pc, #144]	@ (8000bf0 <HAL_UART_MspInit+0x19c>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d136      	bne.n	8000bd2 <HAL_UART_MspInit+0x17e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b64:	2302      	movs	r3, #2
 8000b66:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b6c:	f107 0318 	add.w	r3, r7, #24
 8000b70:	4618      	mov	r0, r3
 8000b72:	f002 f805 	bl	8002b80 <HAL_RCCEx_PeriphCLKConfig>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <HAL_UART_MspInit+0x12c>
      Error_Handler();
 8000b7c:	f7ff fe52 	bl	8000824 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b80:	4b17      	ldr	r3, [pc, #92]	@ (8000be0 <HAL_UART_MspInit+0x18c>)
 8000b82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b84:	4a16      	ldr	r2, [pc, #88]	@ (8000be0 <HAL_UART_MspInit+0x18c>)
 8000b86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b8c:	4b14      	ldr	r3, [pc, #80]	@ (8000be0 <HAL_UART_MspInit+0x18c>)
 8000b8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b98:	4b11      	ldr	r3, [pc, #68]	@ (8000be0 <HAL_UART_MspInit+0x18c>)
 8000b9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b9c:	4a10      	ldr	r2, [pc, #64]	@ (8000be0 <HAL_UART_MspInit+0x18c>)
 8000b9e:	f043 0301 	orr.w	r3, r3, #1
 8000ba2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ba4:	4b0e      	ldr	r3, [pc, #56]	@ (8000be0 <HAL_UART_MspInit+0x18c>)
 8000ba6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ba8:	f003 0301 	and.w	r3, r3, #1
 8000bac:	60bb      	str	r3, [r7, #8]
 8000bae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bb0:	230c      	movs	r3, #12
 8000bb2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bc0:	2307      	movs	r3, #7
 8000bc2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000bc8:	4619      	mov	r1, r3
 8000bca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bce:	f001 f873 	bl	8001cb8 <HAL_GPIO_Init>
}
 8000bd2:	bf00      	nop
 8000bd4:	3780      	adds	r7, #128	@ 0x80
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40013800 	.word	0x40013800
 8000be0:	40021000 	.word	0x40021000
 8000be4:	48000800 	.word	0x48000800
 8000be8:	20000258 	.word	0x20000258
 8000bec:	40020008 	.word	0x40020008
 8000bf0:	40004400 	.word	0x40004400

08000bf4 <start_bestpos>:
  }
}

/* USER CODE BEGIN 1 */
void start_bestpos(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  static uint8_t bestpos_cmd[] = "LOG THISPORT BESTPOSB ONTIME 0.05\r\n";

  HAL_UART_Transmit(&huart1, bestpos_cmd, sizeof(bestpos_cmd), 1000);
 8000bf8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bfc:	2224      	movs	r2, #36	@ 0x24
 8000bfe:	4905      	ldr	r1, [pc, #20]	@ (8000c14 <start_bestpos+0x20>)
 8000c00:	4805      	ldr	r0, [pc, #20]	@ (8000c18 <start_bestpos+0x24>)
 8000c02:	f002 fa5b 	bl	80030bc <HAL_UART_Transmit>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, gps_rx_buffer, BESTPOS_BUFFER_SIZE);
 8000c06:	227c      	movs	r2, #124	@ 0x7c
 8000c08:	4904      	ldr	r1, [pc, #16]	@ (8000c1c <start_bestpos+0x28>)
 8000c0a:	4803      	ldr	r0, [pc, #12]	@ (8000c18 <start_bestpos+0x24>)
 8000c0c:	f003 fe3c 	bl	8004888 <HAL_UARTEx_ReceiveToIdle_DMA>
  return;
 8000c10:	bf00      	nop
}
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	20000004 	.word	0x20000004
 8000c18:	20000130 	.word	0x20000130
 8000c1c:	200000b4 	.word	0x200000b4

08000c20 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000c20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000c24:	b099      	sub	sp, #100	@ 0x64
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	6078      	str	r0, [r7, #4]
 8000c2a:	460b      	mov	r3, r1
 8000c2c:	807b      	strh	r3, [r7, #2]
    if (huart->Instance == USART1) {
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a47      	ldr	r2, [pc, #284]	@ (8000d50 <HAL_UARTEx_RxEventCallback+0x130>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	f040 8087 	bne.w	8000d48 <HAL_UARTEx_RxEventCallback+0x128>
 8000c3a:	466b      	mov	r3, sp
 8000c3c:	461e      	mov	r6, r3

    	static uint8_t sync_bytes[] = {0xaa, 0x44, 0x12};

    	uint8_t temp_buff[Size];
 8000c3e:	8879      	ldrh	r1, [r7, #2]
 8000c40:	460b      	mov	r3, r1
 8000c42:	3b01      	subs	r3, #1
 8000c44:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000c46:	b28b      	uxth	r3, r1
 8000c48:	2200      	movs	r2, #0
 8000c4a:	4698      	mov	r8, r3
 8000c4c:	4691      	mov	r9, r2
 8000c4e:	f04f 0200 	mov.w	r2, #0
 8000c52:	f04f 0300 	mov.w	r3, #0
 8000c56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000c5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000c5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000c62:	b28b      	uxth	r3, r1
 8000c64:	2200      	movs	r2, #0
 8000c66:	461c      	mov	r4, r3
 8000c68:	4615      	mov	r5, r2
 8000c6a:	f04f 0200 	mov.w	r2, #0
 8000c6e:	f04f 0300 	mov.w	r3, #0
 8000c72:	00eb      	lsls	r3, r5, #3
 8000c74:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000c78:	00e2      	lsls	r2, r4, #3
 8000c7a:	460b      	mov	r3, r1
 8000c7c:	3307      	adds	r3, #7
 8000c7e:	08db      	lsrs	r3, r3, #3
 8000c80:	00db      	lsls	r3, r3, #3
 8000c82:	ebad 0d03 	sub.w	sp, sp, r3
 8000c86:	466b      	mov	r3, sp
 8000c88:	3300      	adds	r3, #0
 8000c8a:	657b      	str	r3, [r7, #84]	@ 0x54
    	memcpy(temp_buff, gps_rx_buffer, Size);
 8000c8c:	887b      	ldrh	r3, [r7, #2]
 8000c8e:	461a      	mov	r2, r3
 8000c90:	4930      	ldr	r1, [pc, #192]	@ (8000d54 <HAL_UARTEx_RxEventCallback+0x134>)
 8000c92:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8000c94:	f003 fec6 	bl	8004a24 <memcpy>

    	uint8_t CAN_data[64];
    	uint8_t *CAN_data_ptr = CAN_data;
 8000c98:	f107 0308 	add.w	r3, r7, #8
 8000c9c:	653b      	str	r3, [r7, #80]	@ 0x50

    	for(uint8_t i = 0; i < 3; i++){
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8000ca4:	e010      	b.n	8000cc8 <HAL_UARTEx_RxEventCallback+0xa8>
    		if(temp_buff[i] != sync_bytes[i])
 8000ca6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8000caa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000cac:	5cd2      	ldrb	r2, [r2, r3]
 8000cae:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8000cb2:	4929      	ldr	r1, [pc, #164]	@ (8000d58 <HAL_UARTEx_RxEventCallback+0x138>)
 8000cb4:	5ccb      	ldrb	r3, [r1, r3]
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	d001      	beq.n	8000cbe <HAL_UARTEx_RxEventCallback+0x9e>
    			return;
 8000cba:	46b5      	mov	sp, r6
 8000cbc:	e044      	b.n	8000d48 <HAL_UARTEx_RxEventCallback+0x128>
    	for(uint8_t i = 0; i < 3; i++){
 8000cbe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8000cc8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8000ccc:	2b02      	cmp	r3, #2
 8000cce:	d9ea      	bls.n	8000ca6 <HAL_UARTEx_RxEventCallback+0x86>
    	}

    	uint8_t *ptr = temp_buff + 3;
 8000cd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000cd2:	3303      	adds	r3, #3
 8000cd4:	64fb      	str	r3, [r7, #76]	@ 0x4c

    	uint8_t header_size = *ptr;
 8000cd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
    	//skip over rest of header
    	ptr += header_size;
 8000cde:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000ce2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000ce4:	4413      	add	r3, r2
 8000ce6:	64fb      	str	r3, [r7, #76]	@ 0x4c

    	// See https://docs.novatel.com/OEM7/Content/Logs/BESTPOS.htm?tocpath=Commands%20%2526%20Logs%7CLogs%7CGNSS%20Logs%7C_____20
    	// This copies fields 2-11 inclusive.
    	memcpy(CAN_data_ptr, ptr, 52);
 8000ce8:	2234      	movs	r2, #52	@ 0x34
 8000cea:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8000cec:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8000cee:	f003 fe99 	bl	8004a24 <memcpy>
    	CAN_data_ptr += 52;
 8000cf2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000cf4:	3334      	adds	r3, #52	@ 0x34
 8000cf6:	653b      	str	r3, [r7, #80]	@ 0x50
    	// Skip to field 13
    	ptr += 56;
 8000cf8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000cfa:	3338      	adds	r3, #56	@ 0x38
 8000cfc:	64fb      	str	r3, [r7, #76]	@ 0x4c

    	//Copy fields 13 and 14
    	memcpy(CAN_data_ptr, ptr, 8);
 8000cfe:	2208      	movs	r2, #8
 8000d00:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8000d02:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8000d04:	f003 fe8e 	bl	8004a24 <memcpy>
    	CAN_data_ptr += 8;
 8000d08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000d0a:	3308      	adds	r3, #8
 8000d0c:	653b      	str	r3, [r7, #80]	@ 0x50
    	// Skip to field 16
    	ptr += 9;
 8000d0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000d10:	3309      	adds	r3, #9
 8000d12:	64fb      	str	r3, [r7, #76]	@ 0x4c

    	//Copy field 16
    	memcpy(CAN_data_ptr, ptr, 1);
 8000d14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000d16:	781a      	ldrb	r2, [r3, #0]
 8000d18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000d1a:	701a      	strb	r2, [r3, #0]
    	CAN_data_ptr += 1;
 8000d1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000d1e:	3301      	adds	r3, #1
 8000d20:	653b      	str	r3, [r7, #80]	@ 0x50
    	// Skip to field 20
    	ptr += 4;
 8000d22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000d24:	3304      	adds	r3, #4
 8000d26:	64fb      	str	r3, [r7, #76]	@ 0x4c

    	//Copy fields 20-22
    	memcpy(CAN_data_ptr, ptr, 3);
 8000d28:	2203      	movs	r2, #3
 8000d2a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8000d2c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8000d2e:	f003 fe79 	bl	8004a24 <memcpy>

    	sendCANMessage(CAN_data);
 8000d32:	f107 0308 	add.w	r3, r7, #8
 8000d36:	4618      	mov	r0, r3
 8000d38:	f7ff fcb2 	bl	80006a0 <sendCANMessage>

    	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, gps_rx_buffer, BESTPOS_BUFFER_SIZE);
 8000d3c:	227c      	movs	r2, #124	@ 0x7c
 8000d3e:	4905      	ldr	r1, [pc, #20]	@ (8000d54 <HAL_UARTEx_RxEventCallback+0x134>)
 8000d40:	4806      	ldr	r0, [pc, #24]	@ (8000d5c <HAL_UARTEx_RxEventCallback+0x13c>)
 8000d42:	f003 fda1 	bl	8004888 <HAL_UARTEx_ReceiveToIdle_DMA>
 8000d46:	46b5      	mov	sp, r6
    }
}
 8000d48:	3764      	adds	r7, #100	@ 0x64
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000d50:	40013800 	.word	0x40013800
 8000d54:	200000b4 	.word	0x200000b4
 8000d58:	20000028 	.word	0x20000028
 8000d5c:	20000130 	.word	0x20000130

08000d60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d60:	480d      	ldr	r0, [pc, #52]	@ (8000d98 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d62:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d64:	f7ff fdcc 	bl	8000900 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d68:	480c      	ldr	r0, [pc, #48]	@ (8000d9c <LoopForever+0x6>)
  ldr r1, =_edata
 8000d6a:	490d      	ldr	r1, [pc, #52]	@ (8000da0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d6c:	4a0d      	ldr	r2, [pc, #52]	@ (8000da4 <LoopForever+0xe>)
  movs r3, #0
 8000d6e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000d70:	e002      	b.n	8000d78 <LoopCopyDataInit>

08000d72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d76:	3304      	adds	r3, #4

08000d78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d7c:	d3f9      	bcc.n	8000d72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000da8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d80:	4c0a      	ldr	r4, [pc, #40]	@ (8000dac <LoopForever+0x16>)
  movs r3, #0
 8000d82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d84:	e001      	b.n	8000d8a <LoopFillZerobss>

08000d86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d88:	3204      	adds	r2, #4

08000d8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d8c:	d3fb      	bcc.n	8000d86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d8e:	f003 fe25 	bl	80049dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d92:	f7ff fcdf 	bl	8000754 <main>

08000d96 <LoopForever>:

LoopForever:
    b LoopForever
 8000d96:	e7fe      	b.n	8000d96 <LoopForever>
  ldr   r0, =_estack
 8000d98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000da0:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8000da4:	08004adc 	.word	0x08004adc
  ldr r2, =_sbss
 8000da8:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8000dac:	200002bc 	.word	0x200002bc

08000db0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000db0:	e7fe      	b.n	8000db0 <ADC1_2_IRQHandler>

08000db2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b082      	sub	sp, #8
 8000db6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000db8:	2300      	movs	r3, #0
 8000dba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dbc:	2003      	movs	r0, #3
 8000dbe:	f000 f95b 	bl	8001078 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dc2:	200f      	movs	r0, #15
 8000dc4:	f000 f80e 	bl	8000de4 <HAL_InitTick>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d002      	beq.n	8000dd4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	71fb      	strb	r3, [r7, #7]
 8000dd2:	e001      	b.n	8000dd8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dd4:	f7ff fd2c 	bl	8000830 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dd8:	79fb      	ldrb	r3, [r7, #7]

}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
	...

08000de4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000dec:	2300      	movs	r3, #0
 8000dee:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000df0:	4b16      	ldr	r3, [pc, #88]	@ (8000e4c <HAL_InitTick+0x68>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d022      	beq.n	8000e3e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000df8:	4b15      	ldr	r3, [pc, #84]	@ (8000e50 <HAL_InitTick+0x6c>)
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	4b13      	ldr	r3, [pc, #76]	@ (8000e4c <HAL_InitTick+0x68>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000e04:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f000 f966 	bl	80010de <HAL_SYSTICK_Config>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d10f      	bne.n	8000e38 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2b0f      	cmp	r3, #15
 8000e1c:	d809      	bhi.n	8000e32 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	6879      	ldr	r1, [r7, #4]
 8000e22:	f04f 30ff 	mov.w	r0, #4294967295
 8000e26:	f000 f932 	bl	800108e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e54 <HAL_InitTick+0x70>)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6013      	str	r3, [r2, #0]
 8000e30:	e007      	b.n	8000e42 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
 8000e34:	73fb      	strb	r3, [r7, #15]
 8000e36:	e004      	b.n	8000e42 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	73fb      	strb	r3, [r7, #15]
 8000e3c:	e001      	b.n	8000e42 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3710      	adds	r7, #16
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	20000030 	.word	0x20000030
 8000e50:	20000000 	.word	0x20000000
 8000e54:	2000002c 	.word	0x2000002c

08000e58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e5c:	4b05      	ldr	r3, [pc, #20]	@ (8000e74 <HAL_IncTick+0x1c>)
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	4b05      	ldr	r3, [pc, #20]	@ (8000e78 <HAL_IncTick+0x20>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4413      	add	r3, r2
 8000e66:	4a03      	ldr	r2, [pc, #12]	@ (8000e74 <HAL_IncTick+0x1c>)
 8000e68:	6013      	str	r3, [r2, #0]
}
 8000e6a:	bf00      	nop
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	200002b8 	.word	0x200002b8
 8000e78:	20000030 	.word	0x20000030

08000e7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e80:	4b03      	ldr	r3, [pc, #12]	@ (8000e90 <HAL_GetTick+0x14>)
 8000e82:	681b      	ldr	r3, [r3, #0]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	200002b8 	.word	0x200002b8

08000e94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e9c:	f7ff ffee 	bl	8000e7c <HAL_GetTick>
 8000ea0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eac:	d004      	beq.n	8000eb8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eae:	4b09      	ldr	r3, [pc, #36]	@ (8000ed4 <HAL_Delay+0x40>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	68fa      	ldr	r2, [r7, #12]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000eb8:	bf00      	nop
 8000eba:	f7ff ffdf 	bl	8000e7c <HAL_GetTick>
 8000ebe:	4602      	mov	r2, r0
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	1ad3      	subs	r3, r2, r3
 8000ec4:	68fa      	ldr	r2, [r7, #12]
 8000ec6:	429a      	cmp	r2, r3
 8000ec8:	d8f7      	bhi.n	8000eba <HAL_Delay+0x26>
  {
  }
}
 8000eca:	bf00      	nop
 8000ecc:	bf00      	nop
 8000ece:	3710      	adds	r7, #16
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20000030 	.word	0x20000030

08000ed8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	f003 0307 	and.w	r3, r3, #7
 8000ee6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f1c <__NVIC_SetPriorityGrouping+0x44>)
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eee:	68ba      	ldr	r2, [r7, #8]
 8000ef0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f0a:	4a04      	ldr	r2, [pc, #16]	@ (8000f1c <__NVIC_SetPriorityGrouping+0x44>)
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	60d3      	str	r3, [r2, #12]
}
 8000f10:	bf00      	nop
 8000f12:	3714      	adds	r7, #20
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f24:	4b04      	ldr	r3, [pc, #16]	@ (8000f38 <__NVIC_GetPriorityGrouping+0x18>)
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	0a1b      	lsrs	r3, r3, #8
 8000f2a:	f003 0307 	and.w	r3, r3, #7
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	db0b      	blt.n	8000f66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	f003 021f 	and.w	r2, r3, #31
 8000f54:	4907      	ldr	r1, [pc, #28]	@ (8000f74 <__NVIC_EnableIRQ+0x38>)
 8000f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5a:	095b      	lsrs	r3, r3, #5
 8000f5c:	2001      	movs	r0, #1
 8000f5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	e000e100 	.word	0xe000e100

08000f78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	6039      	str	r1, [r7, #0]
 8000f82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	db0a      	blt.n	8000fa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	b2da      	uxtb	r2, r3
 8000f90:	490c      	ldr	r1, [pc, #48]	@ (8000fc4 <__NVIC_SetPriority+0x4c>)
 8000f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f96:	0112      	lsls	r2, r2, #4
 8000f98:	b2d2      	uxtb	r2, r2
 8000f9a:	440b      	add	r3, r1
 8000f9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fa0:	e00a      	b.n	8000fb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	b2da      	uxtb	r2, r3
 8000fa6:	4908      	ldr	r1, [pc, #32]	@ (8000fc8 <__NVIC_SetPriority+0x50>)
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	f003 030f 	and.w	r3, r3, #15
 8000fae:	3b04      	subs	r3, #4
 8000fb0:	0112      	lsls	r2, r2, #4
 8000fb2:	b2d2      	uxtb	r2, r2
 8000fb4:	440b      	add	r3, r1
 8000fb6:	761a      	strb	r2, [r3, #24]
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	e000e100 	.word	0xe000e100
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b089      	sub	sp, #36	@ 0x24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	f003 0307 	and.w	r3, r3, #7
 8000fde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	f1c3 0307 	rsb	r3, r3, #7
 8000fe6:	2b04      	cmp	r3, #4
 8000fe8:	bf28      	it	cs
 8000fea:	2304      	movcs	r3, #4
 8000fec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	3304      	adds	r3, #4
 8000ff2:	2b06      	cmp	r3, #6
 8000ff4:	d902      	bls.n	8000ffc <NVIC_EncodePriority+0x30>
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	3b03      	subs	r3, #3
 8000ffa:	e000      	b.n	8000ffe <NVIC_EncodePriority+0x32>
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001000:	f04f 32ff 	mov.w	r2, #4294967295
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	43da      	mvns	r2, r3
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	401a      	ands	r2, r3
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001014:	f04f 31ff 	mov.w	r1, #4294967295
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	fa01 f303 	lsl.w	r3, r1, r3
 800101e:	43d9      	mvns	r1, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001024:	4313      	orrs	r3, r2
         );
}
 8001026:	4618      	mov	r0, r3
 8001028:	3724      	adds	r7, #36	@ 0x24
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
	...

08001034 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	3b01      	subs	r3, #1
 8001040:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001044:	d301      	bcc.n	800104a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001046:	2301      	movs	r3, #1
 8001048:	e00f      	b.n	800106a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800104a:	4a0a      	ldr	r2, [pc, #40]	@ (8001074 <SysTick_Config+0x40>)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	3b01      	subs	r3, #1
 8001050:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001052:	210f      	movs	r1, #15
 8001054:	f04f 30ff 	mov.w	r0, #4294967295
 8001058:	f7ff ff8e 	bl	8000f78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800105c:	4b05      	ldr	r3, [pc, #20]	@ (8001074 <SysTick_Config+0x40>)
 800105e:	2200      	movs	r2, #0
 8001060:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001062:	4b04      	ldr	r3, [pc, #16]	@ (8001074 <SysTick_Config+0x40>)
 8001064:	2207      	movs	r2, #7
 8001066:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001068:	2300      	movs	r3, #0
}
 800106a:	4618      	mov	r0, r3
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	e000e010 	.word	0xe000e010

08001078 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f7ff ff29 	bl	8000ed8 <__NVIC_SetPriorityGrouping>
}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b086      	sub	sp, #24
 8001092:	af00      	add	r7, sp, #0
 8001094:	4603      	mov	r3, r0
 8001096:	60b9      	str	r1, [r7, #8]
 8001098:	607a      	str	r2, [r7, #4]
 800109a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800109c:	f7ff ff40 	bl	8000f20 <__NVIC_GetPriorityGrouping>
 80010a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	68b9      	ldr	r1, [r7, #8]
 80010a6:	6978      	ldr	r0, [r7, #20]
 80010a8:	f7ff ff90 	bl	8000fcc <NVIC_EncodePriority>
 80010ac:	4602      	mov	r2, r0
 80010ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010b2:	4611      	mov	r1, r2
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ff5f 	bl	8000f78 <__NVIC_SetPriority>
}
 80010ba:	bf00      	nop
 80010bc:	3718      	adds	r7, #24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b082      	sub	sp, #8
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	4603      	mov	r3, r0
 80010ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ff33 	bl	8000f3c <__NVIC_EnableIRQ>
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff ffa4 	bl	8001034 <SysTick_Config>
 80010ec:	4603      	mov	r3, r0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
	...

080010f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d101      	bne.n	800110a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e08d      	b.n	8001226 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	461a      	mov	r2, r3
 8001110:	4b47      	ldr	r3, [pc, #284]	@ (8001230 <HAL_DMA_Init+0x138>)
 8001112:	429a      	cmp	r2, r3
 8001114:	d80f      	bhi.n	8001136 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	461a      	mov	r2, r3
 800111c:	4b45      	ldr	r3, [pc, #276]	@ (8001234 <HAL_DMA_Init+0x13c>)
 800111e:	4413      	add	r3, r2
 8001120:	4a45      	ldr	r2, [pc, #276]	@ (8001238 <HAL_DMA_Init+0x140>)
 8001122:	fba2 2303 	umull	r2, r3, r2, r3
 8001126:	091b      	lsrs	r3, r3, #4
 8001128:	009a      	lsls	r2, r3, #2
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a42      	ldr	r2, [pc, #264]	@ (800123c <HAL_DMA_Init+0x144>)
 8001132:	641a      	str	r2, [r3, #64]	@ 0x40
 8001134:	e00e      	b.n	8001154 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	461a      	mov	r2, r3
 800113c:	4b40      	ldr	r3, [pc, #256]	@ (8001240 <HAL_DMA_Init+0x148>)
 800113e:	4413      	add	r3, r2
 8001140:	4a3d      	ldr	r2, [pc, #244]	@ (8001238 <HAL_DMA_Init+0x140>)
 8001142:	fba2 2303 	umull	r2, r3, r2, r3
 8001146:	091b      	lsrs	r3, r3, #4
 8001148:	009a      	lsls	r2, r3, #2
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a3c      	ldr	r2, [pc, #240]	@ (8001244 <HAL_DMA_Init+0x14c>)
 8001152:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2202      	movs	r2, #2
 8001158:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800116a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800116e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001178:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	691b      	ldr	r3, [r3, #16]
 800117e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001184:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	699b      	ldr	r3, [r3, #24]
 800118a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001190:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6a1b      	ldr	r3, [r3, #32]
 8001196:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001198:	68fa      	ldr	r2, [r7, #12]
 800119a:	4313      	orrs	r3, r2
 800119c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	68fa      	ldr	r2, [r7, #12]
 80011a4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f000 fa76 	bl	8001698 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80011b4:	d102      	bne.n	80011bc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2200      	movs	r2, #0
 80011ba:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	685a      	ldr	r2, [r3, #4]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011c4:	b2d2      	uxtb	r2, r2
 80011c6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80011d0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d010      	beq.n	80011fc <HAL_DMA_Init+0x104>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	2b04      	cmp	r3, #4
 80011e0:	d80c      	bhi.n	80011fc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f000 fa96 	bl	8001714 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	e008      	b.n	800120e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2200      	movs	r2, #0
 8001200:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2200      	movs	r2, #0
 8001206:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2200      	movs	r2, #0
 800120c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2200      	movs	r2, #0
 8001212:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2201      	movs	r2, #1
 8001218:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2200      	movs	r2, #0
 8001220:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40020407 	.word	0x40020407
 8001234:	bffdfff8 	.word	0xbffdfff8
 8001238:	cccccccd 	.word	0xcccccccd
 800123c:	40020000 	.word	0x40020000
 8001240:	bffdfbf8 	.word	0xbffdfbf8
 8001244:	40020400 	.word	0x40020400

08001248 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
 8001254:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001256:	2300      	movs	r3, #0
 8001258:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001260:	2b01      	cmp	r3, #1
 8001262:	d101      	bne.n	8001268 <HAL_DMA_Start_IT+0x20>
 8001264:	2302      	movs	r3, #2
 8001266:	e066      	b.n	8001336 <HAL_DMA_Start_IT+0xee>
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	2201      	movs	r2, #1
 800126c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001276:	b2db      	uxtb	r3, r3
 8001278:	2b01      	cmp	r3, #1
 800127a:	d155      	bne.n	8001328 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	2202      	movs	r2, #2
 8001280:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	2200      	movs	r2, #0
 8001288:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f022 0201 	bic.w	r2, r2, #1
 8001298:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	68b9      	ldr	r1, [r7, #8]
 80012a0:	68f8      	ldr	r0, [r7, #12]
 80012a2:	f000 f9bb 	bl	800161c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d008      	beq.n	80012c0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f042 020e 	orr.w	r2, r2, #14
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	e00f      	b.n	80012e0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f022 0204 	bic.w	r2, r2, #4
 80012ce:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f042 020a 	orr.w	r2, r2, #10
 80012de:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d007      	beq.n	80012fe <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80012fc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001302:	2b00      	cmp	r3, #0
 8001304:	d007      	beq.n	8001316 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001310:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001314:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f042 0201 	orr.w	r2, r2, #1
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	e005      	b.n	8001334 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	2200      	movs	r2, #0
 800132c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001330:	2302      	movs	r3, #2
 8001332:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001334:	7dfb      	ldrb	r3, [r7, #23]
}
 8001336:	4618      	mov	r0, r3
 8001338:	3718      	adds	r7, #24
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800133e:	b480      	push	{r7}
 8001340:	b085      	sub	sp, #20
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001346:	2300      	movs	r3, #0
 8001348:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001350:	b2db      	uxtb	r3, r3
 8001352:	2b02      	cmp	r3, #2
 8001354:	d005      	beq.n	8001362 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2204      	movs	r2, #4
 800135a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	73fb      	strb	r3, [r7, #15]
 8001360:	e037      	b.n	80013d2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f022 020e 	bic.w	r2, r2, #14
 8001370:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800137c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001380:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f022 0201 	bic.w	r2, r2, #1
 8001390:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001396:	f003 021f 	and.w	r2, r3, #31
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800139e:	2101      	movs	r1, #1
 80013a0:	fa01 f202 	lsl.w	r2, r1, r2
 80013a4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80013ae:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d00c      	beq.n	80013d2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013c2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80013c6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80013d0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2201      	movs	r2, #1
 80013d6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2200      	movs	r2, #0
 80013de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80013e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3714      	adds	r7, #20
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013f8:	2300      	movs	r3, #0
 80013fa:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001402:	b2db      	uxtb	r3, r3
 8001404:	2b02      	cmp	r3, #2
 8001406:	d00d      	beq.n	8001424 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2204      	movs	r2, #4
 800140c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2201      	movs	r2, #1
 8001412:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2200      	movs	r2, #0
 800141a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	73fb      	strb	r3, [r7, #15]
 8001422:	e047      	b.n	80014b4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f022 020e 	bic.w	r2, r2, #14
 8001432:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f022 0201 	bic.w	r2, r2, #1
 8001442:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800144e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001452:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001458:	f003 021f 	and.w	r2, r3, #31
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001460:	2101      	movs	r1, #1
 8001462:	fa01 f202 	lsl.w	r2, r1, r2
 8001466:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001470:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001476:	2b00      	cmp	r3, #0
 8001478:	d00c      	beq.n	8001494 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001484:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001488:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001492:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2201      	movs	r2, #1
 8001498:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2200      	movs	r2, #0
 80014a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d003      	beq.n	80014b4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	4798      	blx	r3
    }
  }
  return status;
 80014b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3710      	adds	r7, #16
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b084      	sub	sp, #16
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014da:	f003 031f 	and.w	r3, r3, #31
 80014de:	2204      	movs	r2, #4
 80014e0:	409a      	lsls	r2, r3
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	4013      	ands	r3, r2
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d026      	beq.n	8001538 <HAL_DMA_IRQHandler+0x7a>
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	f003 0304 	and.w	r3, r3, #4
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d021      	beq.n	8001538 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0320 	and.w	r3, r3, #32
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d107      	bne.n	8001512 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f022 0204 	bic.w	r2, r2, #4
 8001510:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001516:	f003 021f 	and.w	r2, r3, #31
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151e:	2104      	movs	r1, #4
 8001520:	fa01 f202 	lsl.w	r2, r1, r2
 8001524:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152a:	2b00      	cmp	r3, #0
 800152c:	d071      	beq.n	8001612 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001536:	e06c      	b.n	8001612 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800153c:	f003 031f 	and.w	r3, r3, #31
 8001540:	2202      	movs	r2, #2
 8001542:	409a      	lsls	r2, r3
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	4013      	ands	r3, r2
 8001548:	2b00      	cmp	r3, #0
 800154a:	d02e      	beq.n	80015aa <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	2b00      	cmp	r3, #0
 8001554:	d029      	beq.n	80015aa <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0320 	and.w	r3, r3, #32
 8001560:	2b00      	cmp	r3, #0
 8001562:	d10b      	bne.n	800157c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f022 020a 	bic.w	r2, r2, #10
 8001572:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2201      	movs	r2, #1
 8001578:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001580:	f003 021f 	and.w	r2, r3, #31
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001588:	2102      	movs	r1, #2
 800158a:	fa01 f202 	lsl.w	r2, r1, r2
 800158e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2200      	movs	r2, #0
 8001594:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800159c:	2b00      	cmp	r3, #0
 800159e:	d038      	beq.n	8001612 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80015a8:	e033      	b.n	8001612 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ae:	f003 031f 	and.w	r3, r3, #31
 80015b2:	2208      	movs	r2, #8
 80015b4:	409a      	lsls	r2, r3
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	4013      	ands	r3, r2
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d02a      	beq.n	8001614 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	f003 0308 	and.w	r3, r3, #8
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d025      	beq.n	8001614 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f022 020e 	bic.w	r2, r2, #14
 80015d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015dc:	f003 021f 	and.w	r2, r3, #31
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e4:	2101      	movs	r1, #1
 80015e6:	fa01 f202 	lsl.w	r2, r1, r2
 80015ea:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2201      	movs	r2, #1
 80015f0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2201      	movs	r2, #1
 80015f6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2200      	movs	r2, #0
 80015fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001606:	2b00      	cmp	r3, #0
 8001608:	d004      	beq.n	8001614 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001612:	bf00      	nop
 8001614:	bf00      	nop
}
 8001616:	3710      	adds	r7, #16
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}

0800161c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
 8001628:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800162e:	68fa      	ldr	r2, [r7, #12]
 8001630:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001632:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001638:	2b00      	cmp	r3, #0
 800163a:	d004      	beq.n	8001646 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001640:	68fa      	ldr	r2, [r7, #12]
 8001642:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001644:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800164a:	f003 021f 	and.w	r2, r3, #31
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001652:	2101      	movs	r1, #1
 8001654:	fa01 f202 	lsl.w	r2, r1, r2
 8001658:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	683a      	ldr	r2, [r7, #0]
 8001660:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	2b10      	cmp	r3, #16
 8001668:	d108      	bne.n	800167c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	68ba      	ldr	r2, [r7, #8]
 8001678:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800167a:	e007      	b.n	800168c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	68ba      	ldr	r2, [r7, #8]
 8001682:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	60da      	str	r2, [r3, #12]
}
 800168c:	bf00      	nop
 800168e:	3714      	adds	r7, #20
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001698:	b480      	push	{r7}
 800169a:	b087      	sub	sp, #28
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	461a      	mov	r2, r3
 80016a6:	4b16      	ldr	r3, [pc, #88]	@ (8001700 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d802      	bhi.n	80016b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80016ac:	4b15      	ldr	r3, [pc, #84]	@ (8001704 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80016ae:	617b      	str	r3, [r7, #20]
 80016b0:	e001      	b.n	80016b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80016b2:	4b15      	ldr	r3, [pc, #84]	@ (8001708 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80016b4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	3b08      	subs	r3, #8
 80016c2:	4a12      	ldr	r2, [pc, #72]	@ (800170c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80016c4:	fba2 2303 	umull	r2, r3, r2, r3
 80016c8:	091b      	lsrs	r3, r3, #4
 80016ca:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016d0:	089b      	lsrs	r3, r3, #2
 80016d2:	009a      	lsls	r2, r3, #2
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	4413      	add	r3, r2
 80016d8:	461a      	mov	r2, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a0b      	ldr	r2, [pc, #44]	@ (8001710 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80016e2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f003 031f 	and.w	r3, r3, #31
 80016ea:	2201      	movs	r2, #1
 80016ec:	409a      	lsls	r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80016f2:	bf00      	nop
 80016f4:	371c      	adds	r7, #28
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	40020407 	.word	0x40020407
 8001704:	40020800 	.word	0x40020800
 8001708:	40020820 	.word	0x40020820
 800170c:	cccccccd 	.word	0xcccccccd
 8001710:	40020880 	.word	0x40020880

08001714 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	b2db      	uxtb	r3, r3
 8001722:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001724:	68fa      	ldr	r2, [r7, #12]
 8001726:	4b0b      	ldr	r3, [pc, #44]	@ (8001754 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001728:	4413      	add	r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	461a      	mov	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4a08      	ldr	r2, [pc, #32]	@ (8001758 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001736:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	3b01      	subs	r3, #1
 800173c:	f003 031f 	and.w	r3, r3, #31
 8001740:	2201      	movs	r2, #1
 8001742:	409a      	lsls	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001748:	bf00      	nop
 800174a:	3714      	adds	r7, #20
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	1000823f 	.word	0x1000823f
 8001758:	40020940 	.word	0x40020940

0800175c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d101      	bne.n	800176e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e147      	b.n	80019fe <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001774:	b2db      	uxtb	r3, r3
 8001776:	2b00      	cmp	r3, #0
 8001778:	d106      	bne.n	8001788 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2200      	movs	r2, #0
 800177e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f7fe ff32 	bl	80005ec <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	699a      	ldr	r2, [r3, #24]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f022 0210 	bic.w	r2, r2, #16
 8001796:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001798:	f7ff fb70 	bl	8000e7c <HAL_GetTick>
 800179c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800179e:	e012      	b.n	80017c6 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80017a0:	f7ff fb6c 	bl	8000e7c <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b0a      	cmp	r3, #10
 80017ac:	d90b      	bls.n	80017c6 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017b2:	f043 0201 	orr.w	r2, r3, #1
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2203      	movs	r2, #3
 80017be:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e11b      	b.n	80019fe <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	f003 0308 	and.w	r3, r3, #8
 80017d0:	2b08      	cmp	r3, #8
 80017d2:	d0e5      	beq.n	80017a0 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	699a      	ldr	r2, [r3, #24]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f042 0201 	orr.w	r2, r2, #1
 80017e2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017e4:	f7ff fb4a 	bl	8000e7c <HAL_GetTick>
 80017e8:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80017ea:	e012      	b.n	8001812 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80017ec:	f7ff fb46 	bl	8000e7c <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b0a      	cmp	r3, #10
 80017f8:	d90b      	bls.n	8001812 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017fe:	f043 0201 	orr.w	r2, r3, #1
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2203      	movs	r2, #3
 800180a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e0f5      	b.n	80019fe <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	f003 0301 	and.w	r3, r3, #1
 800181c:	2b00      	cmp	r3, #0
 800181e:	d0e5      	beq.n	80017ec <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	699a      	ldr	r2, [r3, #24]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f042 0202 	orr.w	r2, r2, #2
 800182e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a74      	ldr	r2, [pc, #464]	@ (8001a08 <HAL_FDCAN_Init+0x2ac>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d103      	bne.n	8001842 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800183a:	4a74      	ldr	r2, [pc, #464]	@ (8001a0c <HAL_FDCAN_Init+0x2b0>)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	7c1b      	ldrb	r3, [r3, #16]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d108      	bne.n	800185c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	699a      	ldr	r2, [r3, #24]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001858:	619a      	str	r2, [r3, #24]
 800185a:	e007      	b.n	800186c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	699a      	ldr	r2, [r3, #24]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800186a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	7c5b      	ldrb	r3, [r3, #17]
 8001870:	2b01      	cmp	r3, #1
 8001872:	d108      	bne.n	8001886 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	699a      	ldr	r2, [r3, #24]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001882:	619a      	str	r2, [r3, #24]
 8001884:	e007      	b.n	8001896 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	699a      	ldr	r2, [r3, #24]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001894:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	7c9b      	ldrb	r3, [r3, #18]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d108      	bne.n	80018b0 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	699a      	ldr	r2, [r3, #24]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80018ac:	619a      	str	r2, [r3, #24]
 80018ae:	e007      	b.n	80018c0 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	699a      	ldr	r2, [r3, #24]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80018be:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	699b      	ldr	r3, [r3, #24]
 80018c6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	689a      	ldr	r2, [r3, #8]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	430a      	orrs	r2, r1
 80018d4:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	699a      	ldr	r2, [r3, #24]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80018e4:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	691a      	ldr	r2, [r3, #16]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f022 0210 	bic.w	r2, r2, #16
 80018f4:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d108      	bne.n	8001910 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	699a      	ldr	r2, [r3, #24]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f042 0204 	orr.w	r2, r2, #4
 800190c:	619a      	str	r2, [r3, #24]
 800190e:	e02c      	b.n	800196a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d028      	beq.n	800196a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	2b02      	cmp	r3, #2
 800191e:	d01c      	beq.n	800195a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	699a      	ldr	r2, [r3, #24]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800192e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	691a      	ldr	r2, [r3, #16]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f042 0210 	orr.w	r2, r2, #16
 800193e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	2b03      	cmp	r3, #3
 8001946:	d110      	bne.n	800196a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	699a      	ldr	r2, [r3, #24]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f042 0220 	orr.w	r2, r2, #32
 8001956:	619a      	str	r2, [r3, #24]
 8001958:	e007      	b.n	800196a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	699a      	ldr	r2, [r3, #24]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f042 0220 	orr.w	r2, r2, #32
 8001968:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	699b      	ldr	r3, [r3, #24]
 800196e:	3b01      	subs	r3, #1
 8001970:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	69db      	ldr	r3, [r3, #28]
 8001976:	3b01      	subs	r3, #1
 8001978:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800197a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a1b      	ldr	r3, [r3, #32]
 8001980:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001982:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	695b      	ldr	r3, [r3, #20]
 800198a:	3b01      	subs	r3, #1
 800198c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001992:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001994:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800199e:	d115      	bne.n	80019cc <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019a4:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019aa:	3b01      	subs	r3, #1
 80019ac:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80019ae:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b4:	3b01      	subs	r3, #1
 80019b6:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80019b8:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019c0:	3b01      	subs	r3, #1
 80019c2:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80019c8:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80019ca:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	430a      	orrs	r2, r1
 80019de:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f000 f880 	bl	8001ae8 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2201      	movs	r2, #1
 80019f8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40006400 	.word	0x40006400
 8001a0c:	40006500 	.word	0x40006500

08001a10 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d110      	bne.n	8001a46 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2202      	movs	r2, #2
 8001a28:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	699a      	ldr	r2, [r3, #24]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f022 0201 	bic.w	r2, r2, #1
 8001a3a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8001a42:	2300      	movs	r3, #0
 8001a44:	e006      	b.n	8001a54 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a4a:	f043 0204 	orr.w	r2, r3, #4
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
  }
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d12c      	bne.n	8001ad2 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001a80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d007      	beq.n	8001a98 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a8c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e023      	b.n	8001ae0 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001aa0:	0c1b      	lsrs	r3, r3, #16
 8001aa2:	f003 0303 	and.w	r3, r3, #3
 8001aa6:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	68b9      	ldr	r1, [r7, #8]
 8001aae:	68f8      	ldr	r0, [r7, #12]
 8001ab0:	f000 f886 	bl	8001bc0 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2101      	movs	r1, #1
 8001aba:	697a      	ldr	r2, [r7, #20]
 8001abc:	fa01 f202 	lsl.w	r2, r1, r2
 8001ac0:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	409a      	lsls	r2, r3
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	e006      	b.n	8001ae0 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ad6:	f043 0208 	orr.w	r2, r3, #8
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
  }
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3718      	adds	r7, #24
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001af0:	4b30      	ldr	r3, [pc, #192]	@ (8001bb4 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8001af2:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a2f      	ldr	r2, [pc, #188]	@ (8001bb8 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d103      	bne.n	8001b06 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001b04:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a2c      	ldr	r2, [pc, #176]	@ (8001bbc <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d103      	bne.n	8001b18 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 8001b16:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	68ba      	ldr	r2, [r7, #8]
 8001b1c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b26:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b2e:	041a      	lsls	r2, r3, #16
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	430a      	orrs	r2, r1
 8001b36:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b4c:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b54:	061a      	lsls	r2, r3, #24
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	60fb      	str	r3, [r7, #12]
 8001b8c:	e005      	b.n	8001b9a <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	3304      	adds	r3, #4
 8001b98:	60fb      	str	r3, [r7, #12]
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001ba0:	68fa      	ldr	r2, [r7, #12]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d3f3      	bcc.n	8001b8e <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8001ba6:	bf00      	nop
 8001ba8:	bf00      	nop
 8001baa:	3714      	adds	r7, #20
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr
 8001bb4:	4000a400 	.word	0x4000a400
 8001bb8:	40006800 	.word	0x40006800
 8001bbc:	40006c00 	.word	0x40006c00

08001bc0 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b089      	sub	sp, #36	@ 0x24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	60f8      	str	r0, [r7, #12]
 8001bc8:	60b9      	str	r1, [r7, #8]
 8001bca:	607a      	str	r2, [r7, #4]
 8001bcc:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d10a      	bne.n	8001bec <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8001bde:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001be6:	4313      	orrs	r3, r2
 8001be8:	61fb      	str	r3, [r7, #28]
 8001bea:	e00a      	b.n	8001c02 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8001bf4:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8001bfa:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001bfc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001c00:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	6a1b      	ldr	r3, [r3, #32]
 8001c06:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001c0c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8001c12:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8001c18:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001c20:	4313      	orrs	r3, r2
 8001c22:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	00db      	lsls	r3, r3, #3
 8001c2e:	4413      	add	r3, r2
 8001c30:	00db      	lsls	r3, r3, #3
 8001c32:	440b      	add	r3, r1
 8001c34:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	69fa      	ldr	r2, [r7, #28]
 8001c3a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	3304      	adds	r3, #4
 8001c40:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	693a      	ldr	r2, [r7, #16]
 8001c46:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	3304      	adds	r3, #4
 8001c4c:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001c4e:	2300      	movs	r3, #0
 8001c50:	617b      	str	r3, [r7, #20]
 8001c52:	e020      	b.n	8001c96 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	3303      	adds	r3, #3
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	3302      	adds	r3, #2
 8001c64:	6879      	ldr	r1, [r7, #4]
 8001c66:	440b      	add	r3, r1
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001c6c:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	3301      	adds	r3, #1
 8001c72:	6879      	ldr	r1, [r7, #4]
 8001c74:	440b      	add	r3, r1
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001c7a:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8001c7c:	6879      	ldr	r1, [r7, #4]
 8001c7e:	697a      	ldr	r2, [r7, #20]
 8001c80:	440a      	add	r2, r1
 8001c82:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001c84:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	3304      	adds	r3, #4
 8001c8e:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	3304      	adds	r3, #4
 8001c94:	617b      	str	r3, [r7, #20]
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	4a06      	ldr	r2, [pc, #24]	@ (8001cb4 <FDCAN_CopyMessageToRAM+0xf4>)
 8001c9c:	5cd3      	ldrb	r3, [r2, r3]
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d3d6      	bcc.n	8001c54 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8001ca6:	bf00      	nop
 8001ca8:	bf00      	nop
 8001caa:	3724      	adds	r7, #36	@ 0x24
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr
 8001cb4:	08004a94 	.word	0x08004a94

08001cb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b087      	sub	sp, #28
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001cc6:	e15a      	b.n	8001f7e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	2101      	movs	r1, #1
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	f000 814c 	beq.w	8001f78 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f003 0303 	and.w	r3, r3, #3
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d005      	beq.n	8001cf8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d130      	bne.n	8001d5a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	2203      	movs	r2, #3
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	68da      	ldr	r2, [r3, #12]
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	693a      	ldr	r2, [r7, #16]
 8001d26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d2e:	2201      	movs	r2, #1
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	43db      	mvns	r3, r3
 8001d38:	693a      	ldr	r2, [r7, #16]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	091b      	lsrs	r3, r3, #4
 8001d44:	f003 0201 	and.w	r2, r3, #1
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f003 0303 	and.w	r3, r3, #3
 8001d62:	2b03      	cmp	r3, #3
 8001d64:	d017      	beq.n	8001d96 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	2203      	movs	r2, #3
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	43db      	mvns	r3, r3
 8001d78:	693a      	ldr	r2, [r7, #16]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	689a      	ldr	r2, [r3, #8]
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f003 0303 	and.w	r3, r3, #3
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d123      	bne.n	8001dea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	08da      	lsrs	r2, r3, #3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	3208      	adds	r2, #8
 8001daa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	f003 0307 	and.w	r3, r3, #7
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	220f      	movs	r2, #15
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	693a      	ldr	r2, [r7, #16]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	691a      	ldr	r2, [r3, #16]
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	f003 0307 	and.w	r3, r3, #7
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	08da      	lsrs	r2, r3, #3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	3208      	adds	r2, #8
 8001de4:	6939      	ldr	r1, [r7, #16]
 8001de6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	2203      	movs	r2, #3
 8001df6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfa:	43db      	mvns	r3, r3
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f003 0203 	and.w	r2, r3, #3
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	f000 80a6 	beq.w	8001f78 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e2c:	4b5b      	ldr	r3, [pc, #364]	@ (8001f9c <HAL_GPIO_Init+0x2e4>)
 8001e2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e30:	4a5a      	ldr	r2, [pc, #360]	@ (8001f9c <HAL_GPIO_Init+0x2e4>)
 8001e32:	f043 0301 	orr.w	r3, r3, #1
 8001e36:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e38:	4b58      	ldr	r3, [pc, #352]	@ (8001f9c <HAL_GPIO_Init+0x2e4>)
 8001e3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e3c:	f003 0301 	and.w	r3, r3, #1
 8001e40:	60bb      	str	r3, [r7, #8]
 8001e42:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e44:	4a56      	ldr	r2, [pc, #344]	@ (8001fa0 <HAL_GPIO_Init+0x2e8>)
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	089b      	lsrs	r3, r3, #2
 8001e4a:	3302      	adds	r3, #2
 8001e4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	f003 0303 	and.w	r3, r3, #3
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	220f      	movs	r2, #15
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	43db      	mvns	r3, r3
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	4013      	ands	r3, r2
 8001e66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001e6e:	d01f      	beq.n	8001eb0 <HAL_GPIO_Init+0x1f8>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4a4c      	ldr	r2, [pc, #304]	@ (8001fa4 <HAL_GPIO_Init+0x2ec>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d019      	beq.n	8001eac <HAL_GPIO_Init+0x1f4>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4a4b      	ldr	r2, [pc, #300]	@ (8001fa8 <HAL_GPIO_Init+0x2f0>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d013      	beq.n	8001ea8 <HAL_GPIO_Init+0x1f0>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4a4a      	ldr	r2, [pc, #296]	@ (8001fac <HAL_GPIO_Init+0x2f4>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d00d      	beq.n	8001ea4 <HAL_GPIO_Init+0x1ec>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	4a49      	ldr	r2, [pc, #292]	@ (8001fb0 <HAL_GPIO_Init+0x2f8>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d007      	beq.n	8001ea0 <HAL_GPIO_Init+0x1e8>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	4a48      	ldr	r2, [pc, #288]	@ (8001fb4 <HAL_GPIO_Init+0x2fc>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d101      	bne.n	8001e9c <HAL_GPIO_Init+0x1e4>
 8001e98:	2305      	movs	r3, #5
 8001e9a:	e00a      	b.n	8001eb2 <HAL_GPIO_Init+0x1fa>
 8001e9c:	2306      	movs	r3, #6
 8001e9e:	e008      	b.n	8001eb2 <HAL_GPIO_Init+0x1fa>
 8001ea0:	2304      	movs	r3, #4
 8001ea2:	e006      	b.n	8001eb2 <HAL_GPIO_Init+0x1fa>
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e004      	b.n	8001eb2 <HAL_GPIO_Init+0x1fa>
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	e002      	b.n	8001eb2 <HAL_GPIO_Init+0x1fa>
 8001eac:	2301      	movs	r3, #1
 8001eae:	e000      	b.n	8001eb2 <HAL_GPIO_Init+0x1fa>
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	697a      	ldr	r2, [r7, #20]
 8001eb4:	f002 0203 	and.w	r2, r2, #3
 8001eb8:	0092      	lsls	r2, r2, #2
 8001eba:	4093      	lsls	r3, r2
 8001ebc:	693a      	ldr	r2, [r7, #16]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ec2:	4937      	ldr	r1, [pc, #220]	@ (8001fa0 <HAL_GPIO_Init+0x2e8>)
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	089b      	lsrs	r3, r3, #2
 8001ec8:	3302      	adds	r3, #2
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ed0:	4b39      	ldr	r3, [pc, #228]	@ (8001fb8 <HAL_GPIO_Init+0x300>)
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	4013      	ands	r3, r2
 8001ede:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d003      	beq.n	8001ef4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ef4:	4a30      	ldr	r2, [pc, #192]	@ (8001fb8 <HAL_GPIO_Init+0x300>)
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001efa:	4b2f      	ldr	r3, [pc, #188]	@ (8001fb8 <HAL_GPIO_Init+0x300>)
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	43db      	mvns	r3, r3
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	4013      	ands	r3, r2
 8001f08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d003      	beq.n	8001f1e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f1e:	4a26      	ldr	r2, [pc, #152]	@ (8001fb8 <HAL_GPIO_Init+0x300>)
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001f24:	4b24      	ldr	r3, [pc, #144]	@ (8001fb8 <HAL_GPIO_Init+0x300>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	43db      	mvns	r3, r3
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	4013      	ands	r3, r2
 8001f32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d003      	beq.n	8001f48 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001f40:	693a      	ldr	r2, [r7, #16]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f48:	4a1b      	ldr	r2, [pc, #108]	@ (8001fb8 <HAL_GPIO_Init+0x300>)
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001f4e:	4b1a      	ldr	r3, [pc, #104]	@ (8001fb8 <HAL_GPIO_Init+0x300>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	43db      	mvns	r3, r3
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d003      	beq.n	8001f72 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f72:	4a11      	ldr	r2, [pc, #68]	@ (8001fb8 <HAL_GPIO_Init+0x300>)
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	fa22 f303 	lsr.w	r3, r2, r3
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	f47f ae9d 	bne.w	8001cc8 <HAL_GPIO_Init+0x10>
  }
}
 8001f8e:	bf00      	nop
 8001f90:	bf00      	nop
 8001f92:	371c      	adds	r7, #28
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	40010000 	.word	0x40010000
 8001fa4:	48000400 	.word	0x48000400
 8001fa8:	48000800 	.word	0x48000800
 8001fac:	48000c00 	.word	0x48000c00
 8001fb0:	48001000 	.word	0x48001000
 8001fb4:	48001400 	.word	0x48001400
 8001fb8:	40010400 	.word	0x40010400

08001fbc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d141      	bne.n	800204e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001fca:	4b4b      	ldr	r3, [pc, #300]	@ (80020f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001fd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fd6:	d131      	bne.n	800203c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001fd8:	4b47      	ldr	r3, [pc, #284]	@ (80020f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001fde:	4a46      	ldr	r2, [pc, #280]	@ (80020f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fe0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001fe4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fe8:	4b43      	ldr	r3, [pc, #268]	@ (80020f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001ff0:	4a41      	ldr	r2, [pc, #260]	@ (80020f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ff2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ff6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ff8:	4b40      	ldr	r3, [pc, #256]	@ (80020fc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2232      	movs	r2, #50	@ 0x32
 8001ffe:	fb02 f303 	mul.w	r3, r2, r3
 8002002:	4a3f      	ldr	r2, [pc, #252]	@ (8002100 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002004:	fba2 2303 	umull	r2, r3, r2, r3
 8002008:	0c9b      	lsrs	r3, r3, #18
 800200a:	3301      	adds	r3, #1
 800200c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800200e:	e002      	b.n	8002016 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	3b01      	subs	r3, #1
 8002014:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002016:	4b38      	ldr	r3, [pc, #224]	@ (80020f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002018:	695b      	ldr	r3, [r3, #20]
 800201a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800201e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002022:	d102      	bne.n	800202a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d1f2      	bne.n	8002010 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800202a:	4b33      	ldr	r3, [pc, #204]	@ (80020f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800202c:	695b      	ldr	r3, [r3, #20]
 800202e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002032:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002036:	d158      	bne.n	80020ea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	e057      	b.n	80020ec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800203c:	4b2e      	ldr	r3, [pc, #184]	@ (80020f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800203e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002042:	4a2d      	ldr	r2, [pc, #180]	@ (80020f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002044:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002048:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800204c:	e04d      	b.n	80020ea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002054:	d141      	bne.n	80020da <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002056:	4b28      	ldr	r3, [pc, #160]	@ (80020f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800205e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002062:	d131      	bne.n	80020c8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002064:	4b24      	ldr	r3, [pc, #144]	@ (80020f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002066:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800206a:	4a23      	ldr	r2, [pc, #140]	@ (80020f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800206c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002070:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002074:	4b20      	ldr	r3, [pc, #128]	@ (80020f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800207c:	4a1e      	ldr	r2, [pc, #120]	@ (80020f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800207e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002082:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002084:	4b1d      	ldr	r3, [pc, #116]	@ (80020fc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2232      	movs	r2, #50	@ 0x32
 800208a:	fb02 f303 	mul.w	r3, r2, r3
 800208e:	4a1c      	ldr	r2, [pc, #112]	@ (8002100 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002090:	fba2 2303 	umull	r2, r3, r2, r3
 8002094:	0c9b      	lsrs	r3, r3, #18
 8002096:	3301      	adds	r3, #1
 8002098:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800209a:	e002      	b.n	80020a2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	3b01      	subs	r3, #1
 80020a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020a2:	4b15      	ldr	r3, [pc, #84]	@ (80020f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020ae:	d102      	bne.n	80020b6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d1f2      	bne.n	800209c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020b6:	4b10      	ldr	r3, [pc, #64]	@ (80020f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020c2:	d112      	bne.n	80020ea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e011      	b.n	80020ec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020c8:	4b0b      	ldr	r3, [pc, #44]	@ (80020f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80020ce:	4a0a      	ldr	r2, [pc, #40]	@ (80020f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020d4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80020d8:	e007      	b.n	80020ea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80020da:	4b07      	ldr	r3, [pc, #28]	@ (80020f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80020e2:	4a05      	ldr	r2, [pc, #20]	@ (80020f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020e4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020e8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3714      	adds	r7, #20
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr
 80020f8:	40007000 	.word	0x40007000
 80020fc:	20000000 	.word	0x20000000
 8002100:	431bde83 	.word	0x431bde83

08002104 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002108:	4b05      	ldr	r3, [pc, #20]	@ (8002120 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	4a04      	ldr	r2, [pc, #16]	@ (8002120 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800210e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002112:	6093      	str	r3, [r2, #8]
}
 8002114:	bf00      	nop
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	40007000 	.word	0x40007000

08002124 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b088      	sub	sp, #32
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d101      	bne.n	8002136 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e2fe      	b.n	8002734 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	2b00      	cmp	r3, #0
 8002140:	d075      	beq.n	800222e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002142:	4b97      	ldr	r3, [pc, #604]	@ (80023a0 <HAL_RCC_OscConfig+0x27c>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f003 030c 	and.w	r3, r3, #12
 800214a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800214c:	4b94      	ldr	r3, [pc, #592]	@ (80023a0 <HAL_RCC_OscConfig+0x27c>)
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	f003 0303 	and.w	r3, r3, #3
 8002154:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	2b0c      	cmp	r3, #12
 800215a:	d102      	bne.n	8002162 <HAL_RCC_OscConfig+0x3e>
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	2b03      	cmp	r3, #3
 8002160:	d002      	beq.n	8002168 <HAL_RCC_OscConfig+0x44>
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	2b08      	cmp	r3, #8
 8002166:	d10b      	bne.n	8002180 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002168:	4b8d      	ldr	r3, [pc, #564]	@ (80023a0 <HAL_RCC_OscConfig+0x27c>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d05b      	beq.n	800222c <HAL_RCC_OscConfig+0x108>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d157      	bne.n	800222c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e2d9      	b.n	8002734 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002188:	d106      	bne.n	8002198 <HAL_RCC_OscConfig+0x74>
 800218a:	4b85      	ldr	r3, [pc, #532]	@ (80023a0 <HAL_RCC_OscConfig+0x27c>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a84      	ldr	r2, [pc, #528]	@ (80023a0 <HAL_RCC_OscConfig+0x27c>)
 8002190:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002194:	6013      	str	r3, [r2, #0]
 8002196:	e01d      	b.n	80021d4 <HAL_RCC_OscConfig+0xb0>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021a0:	d10c      	bne.n	80021bc <HAL_RCC_OscConfig+0x98>
 80021a2:	4b7f      	ldr	r3, [pc, #508]	@ (80023a0 <HAL_RCC_OscConfig+0x27c>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a7e      	ldr	r2, [pc, #504]	@ (80023a0 <HAL_RCC_OscConfig+0x27c>)
 80021a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021ac:	6013      	str	r3, [r2, #0]
 80021ae:	4b7c      	ldr	r3, [pc, #496]	@ (80023a0 <HAL_RCC_OscConfig+0x27c>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a7b      	ldr	r2, [pc, #492]	@ (80023a0 <HAL_RCC_OscConfig+0x27c>)
 80021b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021b8:	6013      	str	r3, [r2, #0]
 80021ba:	e00b      	b.n	80021d4 <HAL_RCC_OscConfig+0xb0>
 80021bc:	4b78      	ldr	r3, [pc, #480]	@ (80023a0 <HAL_RCC_OscConfig+0x27c>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a77      	ldr	r2, [pc, #476]	@ (80023a0 <HAL_RCC_OscConfig+0x27c>)
 80021c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021c6:	6013      	str	r3, [r2, #0]
 80021c8:	4b75      	ldr	r3, [pc, #468]	@ (80023a0 <HAL_RCC_OscConfig+0x27c>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a74      	ldr	r2, [pc, #464]	@ (80023a0 <HAL_RCC_OscConfig+0x27c>)
 80021ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d013      	beq.n	8002204 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021dc:	f7fe fe4e 	bl	8000e7c <HAL_GetTick>
 80021e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021e4:	f7fe fe4a 	bl	8000e7c <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b64      	cmp	r3, #100	@ 0x64
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e29e      	b.n	8002734 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021f6:	4b6a      	ldr	r3, [pc, #424]	@ (80023a0 <HAL_RCC_OscConfig+0x27c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d0f0      	beq.n	80021e4 <HAL_RCC_OscConfig+0xc0>
 8002202:	e014      	b.n	800222e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002204:	f7fe fe3a 	bl	8000e7c <HAL_GetTick>
 8002208:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800220a:	e008      	b.n	800221e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800220c:	f7fe fe36 	bl	8000e7c <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b64      	cmp	r3, #100	@ 0x64
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e28a      	b.n	8002734 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800221e:	4b60      	ldr	r3, [pc, #384]	@ (80023a0 <HAL_RCC_OscConfig+0x27c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1f0      	bne.n	800220c <HAL_RCC_OscConfig+0xe8>
 800222a:	e000      	b.n	800222e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800222c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d075      	beq.n	8002326 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800223a:	4b59      	ldr	r3, [pc, #356]	@ (80023a0 <HAL_RCC_OscConfig+0x27c>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 030c 	and.w	r3, r3, #12
 8002242:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002244:	4b56      	ldr	r3, [pc, #344]	@ (80023a0 <HAL_RCC_OscConfig+0x27c>)
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	f003 0303 	and.w	r3, r3, #3
 800224c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	2b0c      	cmp	r3, #12
 8002252:	d102      	bne.n	800225a <HAL_RCC_OscConfig+0x136>
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	2b02      	cmp	r3, #2
 8002258:	d002      	beq.n	8002260 <HAL_RCC_OscConfig+0x13c>
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	2b04      	cmp	r3, #4
 800225e:	d11f      	bne.n	80022a0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002260:	4b4f      	ldr	r3, [pc, #316]	@ (80023a0 <HAL_RCC_OscConfig+0x27c>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002268:	2b00      	cmp	r3, #0
 800226a:	d005      	beq.n	8002278 <HAL_RCC_OscConfig+0x154>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d101      	bne.n	8002278 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e25d      	b.n	8002734 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002278:	4b49      	ldr	r3, [pc, #292]	@ (80023a0 <HAL_RCC_OscConfig+0x27c>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	691b      	ldr	r3, [r3, #16]
 8002284:	061b      	lsls	r3, r3, #24
 8002286:	4946      	ldr	r1, [pc, #280]	@ (80023a0 <HAL_RCC_OscConfig+0x27c>)
 8002288:	4313      	orrs	r3, r2
 800228a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800228c:	4b45      	ldr	r3, [pc, #276]	@ (80023a4 <HAL_RCC_OscConfig+0x280>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4618      	mov	r0, r3
 8002292:	f7fe fda7 	bl	8000de4 <HAL_InitTick>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d043      	beq.n	8002324 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e249      	b.n	8002734 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d023      	beq.n	80022f0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022a8:	4b3d      	ldr	r3, [pc, #244]	@ (80023a0 <HAL_RCC_OscConfig+0x27c>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a3c      	ldr	r2, [pc, #240]	@ (80023a0 <HAL_RCC_OscConfig+0x27c>)
 80022ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b4:	f7fe fde2 	bl	8000e7c <HAL_GetTick>
 80022b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022ba:	e008      	b.n	80022ce <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022bc:	f7fe fdde 	bl	8000e7c <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d901      	bls.n	80022ce <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e232      	b.n	8002734 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022ce:	4b34      	ldr	r3, [pc, #208]	@ (80023a0 <HAL_RCC_OscConfig+0x27c>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d0f0      	beq.n	80022bc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022da:	4b31      	ldr	r3, [pc, #196]	@ (80023a0 <HAL_RCC_OscConfig+0x27c>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	061b      	lsls	r3, r3, #24
 80022e8:	492d      	ldr	r1, [pc, #180]	@ (80023a0 <HAL_RCC_OscConfig+0x27c>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	604b      	str	r3, [r1, #4]
 80022ee:	e01a      	b.n	8002326 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022f0:	4b2b      	ldr	r3, [pc, #172]	@ (80023a0 <HAL_RCC_OscConfig+0x27c>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a2a      	ldr	r2, [pc, #168]	@ (80023a0 <HAL_RCC_OscConfig+0x27c>)
 80022f6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80022fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fc:	f7fe fdbe 	bl	8000e7c <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002304:	f7fe fdba 	bl	8000e7c <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b02      	cmp	r3, #2
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e20e      	b.n	8002734 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002316:	4b22      	ldr	r3, [pc, #136]	@ (80023a0 <HAL_RCC_OscConfig+0x27c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1f0      	bne.n	8002304 <HAL_RCC_OscConfig+0x1e0>
 8002322:	e000      	b.n	8002326 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002324:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0308 	and.w	r3, r3, #8
 800232e:	2b00      	cmp	r3, #0
 8002330:	d041      	beq.n	80023b6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d01c      	beq.n	8002374 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800233a:	4b19      	ldr	r3, [pc, #100]	@ (80023a0 <HAL_RCC_OscConfig+0x27c>)
 800233c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002340:	4a17      	ldr	r2, [pc, #92]	@ (80023a0 <HAL_RCC_OscConfig+0x27c>)
 8002342:	f043 0301 	orr.w	r3, r3, #1
 8002346:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800234a:	f7fe fd97 	bl	8000e7c <HAL_GetTick>
 800234e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002350:	e008      	b.n	8002364 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002352:	f7fe fd93 	bl	8000e7c <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	2b02      	cmp	r3, #2
 800235e:	d901      	bls.n	8002364 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e1e7      	b.n	8002734 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002364:	4b0e      	ldr	r3, [pc, #56]	@ (80023a0 <HAL_RCC_OscConfig+0x27c>)
 8002366:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d0ef      	beq.n	8002352 <HAL_RCC_OscConfig+0x22e>
 8002372:	e020      	b.n	80023b6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002374:	4b0a      	ldr	r3, [pc, #40]	@ (80023a0 <HAL_RCC_OscConfig+0x27c>)
 8002376:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800237a:	4a09      	ldr	r2, [pc, #36]	@ (80023a0 <HAL_RCC_OscConfig+0x27c>)
 800237c:	f023 0301 	bic.w	r3, r3, #1
 8002380:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002384:	f7fe fd7a 	bl	8000e7c <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800238a:	e00d      	b.n	80023a8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800238c:	f7fe fd76 	bl	8000e7c <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d906      	bls.n	80023a8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e1ca      	b.n	8002734 <HAL_RCC_OscConfig+0x610>
 800239e:	bf00      	nop
 80023a0:	40021000 	.word	0x40021000
 80023a4:	2000002c 	.word	0x2000002c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023a8:	4b8c      	ldr	r3, [pc, #560]	@ (80025dc <HAL_RCC_OscConfig+0x4b8>)
 80023aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1ea      	bne.n	800238c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0304 	and.w	r3, r3, #4
 80023be:	2b00      	cmp	r3, #0
 80023c0:	f000 80a6 	beq.w	8002510 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023c4:	2300      	movs	r3, #0
 80023c6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80023c8:	4b84      	ldr	r3, [pc, #528]	@ (80025dc <HAL_RCC_OscConfig+0x4b8>)
 80023ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d101      	bne.n	80023d8 <HAL_RCC_OscConfig+0x2b4>
 80023d4:	2301      	movs	r3, #1
 80023d6:	e000      	b.n	80023da <HAL_RCC_OscConfig+0x2b6>
 80023d8:	2300      	movs	r3, #0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d00d      	beq.n	80023fa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023de:	4b7f      	ldr	r3, [pc, #508]	@ (80025dc <HAL_RCC_OscConfig+0x4b8>)
 80023e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023e2:	4a7e      	ldr	r2, [pc, #504]	@ (80025dc <HAL_RCC_OscConfig+0x4b8>)
 80023e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80023ea:	4b7c      	ldr	r3, [pc, #496]	@ (80025dc <HAL_RCC_OscConfig+0x4b8>)
 80023ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023f2:	60fb      	str	r3, [r7, #12]
 80023f4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80023f6:	2301      	movs	r3, #1
 80023f8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023fa:	4b79      	ldr	r3, [pc, #484]	@ (80025e0 <HAL_RCC_OscConfig+0x4bc>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002402:	2b00      	cmp	r3, #0
 8002404:	d118      	bne.n	8002438 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002406:	4b76      	ldr	r3, [pc, #472]	@ (80025e0 <HAL_RCC_OscConfig+0x4bc>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a75      	ldr	r2, [pc, #468]	@ (80025e0 <HAL_RCC_OscConfig+0x4bc>)
 800240c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002410:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002412:	f7fe fd33 	bl	8000e7c <HAL_GetTick>
 8002416:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002418:	e008      	b.n	800242c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800241a:	f7fe fd2f 	bl	8000e7c <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	2b02      	cmp	r3, #2
 8002426:	d901      	bls.n	800242c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e183      	b.n	8002734 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800242c:	4b6c      	ldr	r3, [pc, #432]	@ (80025e0 <HAL_RCC_OscConfig+0x4bc>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002434:	2b00      	cmp	r3, #0
 8002436:	d0f0      	beq.n	800241a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d108      	bne.n	8002452 <HAL_RCC_OscConfig+0x32e>
 8002440:	4b66      	ldr	r3, [pc, #408]	@ (80025dc <HAL_RCC_OscConfig+0x4b8>)
 8002442:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002446:	4a65      	ldr	r2, [pc, #404]	@ (80025dc <HAL_RCC_OscConfig+0x4b8>)
 8002448:	f043 0301 	orr.w	r3, r3, #1
 800244c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002450:	e024      	b.n	800249c <HAL_RCC_OscConfig+0x378>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	2b05      	cmp	r3, #5
 8002458:	d110      	bne.n	800247c <HAL_RCC_OscConfig+0x358>
 800245a:	4b60      	ldr	r3, [pc, #384]	@ (80025dc <HAL_RCC_OscConfig+0x4b8>)
 800245c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002460:	4a5e      	ldr	r2, [pc, #376]	@ (80025dc <HAL_RCC_OscConfig+0x4b8>)
 8002462:	f043 0304 	orr.w	r3, r3, #4
 8002466:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800246a:	4b5c      	ldr	r3, [pc, #368]	@ (80025dc <HAL_RCC_OscConfig+0x4b8>)
 800246c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002470:	4a5a      	ldr	r2, [pc, #360]	@ (80025dc <HAL_RCC_OscConfig+0x4b8>)
 8002472:	f043 0301 	orr.w	r3, r3, #1
 8002476:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800247a:	e00f      	b.n	800249c <HAL_RCC_OscConfig+0x378>
 800247c:	4b57      	ldr	r3, [pc, #348]	@ (80025dc <HAL_RCC_OscConfig+0x4b8>)
 800247e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002482:	4a56      	ldr	r2, [pc, #344]	@ (80025dc <HAL_RCC_OscConfig+0x4b8>)
 8002484:	f023 0301 	bic.w	r3, r3, #1
 8002488:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800248c:	4b53      	ldr	r3, [pc, #332]	@ (80025dc <HAL_RCC_OscConfig+0x4b8>)
 800248e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002492:	4a52      	ldr	r2, [pc, #328]	@ (80025dc <HAL_RCC_OscConfig+0x4b8>)
 8002494:	f023 0304 	bic.w	r3, r3, #4
 8002498:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d016      	beq.n	80024d2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a4:	f7fe fcea 	bl	8000e7c <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024aa:	e00a      	b.n	80024c2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ac:	f7fe fce6 	bl	8000e7c <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e138      	b.n	8002734 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024c2:	4b46      	ldr	r3, [pc, #280]	@ (80025dc <HAL_RCC_OscConfig+0x4b8>)
 80024c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d0ed      	beq.n	80024ac <HAL_RCC_OscConfig+0x388>
 80024d0:	e015      	b.n	80024fe <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d2:	f7fe fcd3 	bl	8000e7c <HAL_GetTick>
 80024d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024d8:	e00a      	b.n	80024f0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024da:	f7fe fccf 	bl	8000e7c <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d901      	bls.n	80024f0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e121      	b.n	8002734 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024f0:	4b3a      	ldr	r3, [pc, #232]	@ (80025dc <HAL_RCC_OscConfig+0x4b8>)
 80024f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1ed      	bne.n	80024da <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80024fe:	7ffb      	ldrb	r3, [r7, #31]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d105      	bne.n	8002510 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002504:	4b35      	ldr	r3, [pc, #212]	@ (80025dc <HAL_RCC_OscConfig+0x4b8>)
 8002506:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002508:	4a34      	ldr	r2, [pc, #208]	@ (80025dc <HAL_RCC_OscConfig+0x4b8>)
 800250a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800250e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0320 	and.w	r3, r3, #32
 8002518:	2b00      	cmp	r3, #0
 800251a:	d03c      	beq.n	8002596 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d01c      	beq.n	800255e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002524:	4b2d      	ldr	r3, [pc, #180]	@ (80025dc <HAL_RCC_OscConfig+0x4b8>)
 8002526:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800252a:	4a2c      	ldr	r2, [pc, #176]	@ (80025dc <HAL_RCC_OscConfig+0x4b8>)
 800252c:	f043 0301 	orr.w	r3, r3, #1
 8002530:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002534:	f7fe fca2 	bl	8000e7c <HAL_GetTick>
 8002538:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800253c:	f7fe fc9e 	bl	8000e7c <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b02      	cmp	r3, #2
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e0f2      	b.n	8002734 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800254e:	4b23      	ldr	r3, [pc, #140]	@ (80025dc <HAL_RCC_OscConfig+0x4b8>)
 8002550:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d0ef      	beq.n	800253c <HAL_RCC_OscConfig+0x418>
 800255c:	e01b      	b.n	8002596 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800255e:	4b1f      	ldr	r3, [pc, #124]	@ (80025dc <HAL_RCC_OscConfig+0x4b8>)
 8002560:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002564:	4a1d      	ldr	r2, [pc, #116]	@ (80025dc <HAL_RCC_OscConfig+0x4b8>)
 8002566:	f023 0301 	bic.w	r3, r3, #1
 800256a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800256e:	f7fe fc85 	bl	8000e7c <HAL_GetTick>
 8002572:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002574:	e008      	b.n	8002588 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002576:	f7fe fc81 	bl	8000e7c <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d901      	bls.n	8002588 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e0d5      	b.n	8002734 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002588:	4b14      	ldr	r3, [pc, #80]	@ (80025dc <HAL_RCC_OscConfig+0x4b8>)
 800258a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1ef      	bne.n	8002576 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	69db      	ldr	r3, [r3, #28]
 800259a:	2b00      	cmp	r3, #0
 800259c:	f000 80c9 	beq.w	8002732 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025a0:	4b0e      	ldr	r3, [pc, #56]	@ (80025dc <HAL_RCC_OscConfig+0x4b8>)
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	f003 030c 	and.w	r3, r3, #12
 80025a8:	2b0c      	cmp	r3, #12
 80025aa:	f000 8083 	beq.w	80026b4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	69db      	ldr	r3, [r3, #28]
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d15e      	bne.n	8002674 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025b6:	4b09      	ldr	r3, [pc, #36]	@ (80025dc <HAL_RCC_OscConfig+0x4b8>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a08      	ldr	r2, [pc, #32]	@ (80025dc <HAL_RCC_OscConfig+0x4b8>)
 80025bc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80025c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c2:	f7fe fc5b 	bl	8000e7c <HAL_GetTick>
 80025c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025c8:	e00c      	b.n	80025e4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ca:	f7fe fc57 	bl	8000e7c <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d905      	bls.n	80025e4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e0ab      	b.n	8002734 <HAL_RCC_OscConfig+0x610>
 80025dc:	40021000 	.word	0x40021000
 80025e0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025e4:	4b55      	ldr	r3, [pc, #340]	@ (800273c <HAL_RCC_OscConfig+0x618>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d1ec      	bne.n	80025ca <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025f0:	4b52      	ldr	r3, [pc, #328]	@ (800273c <HAL_RCC_OscConfig+0x618>)
 80025f2:	68da      	ldr	r2, [r3, #12]
 80025f4:	4b52      	ldr	r3, [pc, #328]	@ (8002740 <HAL_RCC_OscConfig+0x61c>)
 80025f6:	4013      	ands	r3, r2
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	6a11      	ldr	r1, [r2, #32]
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002600:	3a01      	subs	r2, #1
 8002602:	0112      	lsls	r2, r2, #4
 8002604:	4311      	orrs	r1, r2
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800260a:	0212      	lsls	r2, r2, #8
 800260c:	4311      	orrs	r1, r2
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002612:	0852      	lsrs	r2, r2, #1
 8002614:	3a01      	subs	r2, #1
 8002616:	0552      	lsls	r2, r2, #21
 8002618:	4311      	orrs	r1, r2
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800261e:	0852      	lsrs	r2, r2, #1
 8002620:	3a01      	subs	r2, #1
 8002622:	0652      	lsls	r2, r2, #25
 8002624:	4311      	orrs	r1, r2
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800262a:	06d2      	lsls	r2, r2, #27
 800262c:	430a      	orrs	r2, r1
 800262e:	4943      	ldr	r1, [pc, #268]	@ (800273c <HAL_RCC_OscConfig+0x618>)
 8002630:	4313      	orrs	r3, r2
 8002632:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002634:	4b41      	ldr	r3, [pc, #260]	@ (800273c <HAL_RCC_OscConfig+0x618>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a40      	ldr	r2, [pc, #256]	@ (800273c <HAL_RCC_OscConfig+0x618>)
 800263a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800263e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002640:	4b3e      	ldr	r3, [pc, #248]	@ (800273c <HAL_RCC_OscConfig+0x618>)
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	4a3d      	ldr	r2, [pc, #244]	@ (800273c <HAL_RCC_OscConfig+0x618>)
 8002646:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800264a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800264c:	f7fe fc16 	bl	8000e7c <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002654:	f7fe fc12 	bl	8000e7c <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e066      	b.n	8002734 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002666:	4b35      	ldr	r3, [pc, #212]	@ (800273c <HAL_RCC_OscConfig+0x618>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d0f0      	beq.n	8002654 <HAL_RCC_OscConfig+0x530>
 8002672:	e05e      	b.n	8002732 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002674:	4b31      	ldr	r3, [pc, #196]	@ (800273c <HAL_RCC_OscConfig+0x618>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a30      	ldr	r2, [pc, #192]	@ (800273c <HAL_RCC_OscConfig+0x618>)
 800267a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800267e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002680:	f7fe fbfc 	bl	8000e7c <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002688:	f7fe fbf8 	bl	8000e7c <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e04c      	b.n	8002734 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800269a:	4b28      	ldr	r3, [pc, #160]	@ (800273c <HAL_RCC_OscConfig+0x618>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1f0      	bne.n	8002688 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80026a6:	4b25      	ldr	r3, [pc, #148]	@ (800273c <HAL_RCC_OscConfig+0x618>)
 80026a8:	68da      	ldr	r2, [r3, #12]
 80026aa:	4924      	ldr	r1, [pc, #144]	@ (800273c <HAL_RCC_OscConfig+0x618>)
 80026ac:	4b25      	ldr	r3, [pc, #148]	@ (8002744 <HAL_RCC_OscConfig+0x620>)
 80026ae:	4013      	ands	r3, r2
 80026b0:	60cb      	str	r3, [r1, #12]
 80026b2:	e03e      	b.n	8002732 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	69db      	ldr	r3, [r3, #28]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d101      	bne.n	80026c0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e039      	b.n	8002734 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80026c0:	4b1e      	ldr	r3, [pc, #120]	@ (800273c <HAL_RCC_OscConfig+0x618>)
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	f003 0203 	and.w	r2, r3, #3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a1b      	ldr	r3, [r3, #32]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d12c      	bne.n	800272e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026de:	3b01      	subs	r3, #1
 80026e0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d123      	bne.n	800272e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026f0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d11b      	bne.n	800272e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002700:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002702:	429a      	cmp	r2, r3
 8002704:	d113      	bne.n	800272e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002710:	085b      	lsrs	r3, r3, #1
 8002712:	3b01      	subs	r3, #1
 8002714:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002716:	429a      	cmp	r2, r3
 8002718:	d109      	bne.n	800272e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002724:	085b      	lsrs	r3, r3, #1
 8002726:	3b01      	subs	r3, #1
 8002728:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800272a:	429a      	cmp	r2, r3
 800272c:	d001      	beq.n	8002732 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e000      	b.n	8002734 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002732:	2300      	movs	r3, #0
}
 8002734:	4618      	mov	r0, r3
 8002736:	3720      	adds	r7, #32
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	40021000 	.word	0x40021000
 8002740:	019f800c 	.word	0x019f800c
 8002744:	feeefffc 	.word	0xfeeefffc

08002748 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002752:	2300      	movs	r3, #0
 8002754:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d101      	bne.n	8002760 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e11e      	b.n	800299e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002760:	4b91      	ldr	r3, [pc, #580]	@ (80029a8 <HAL_RCC_ClockConfig+0x260>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 030f 	and.w	r3, r3, #15
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	429a      	cmp	r2, r3
 800276c:	d910      	bls.n	8002790 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800276e:	4b8e      	ldr	r3, [pc, #568]	@ (80029a8 <HAL_RCC_ClockConfig+0x260>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f023 020f 	bic.w	r2, r3, #15
 8002776:	498c      	ldr	r1, [pc, #560]	@ (80029a8 <HAL_RCC_ClockConfig+0x260>)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	4313      	orrs	r3, r2
 800277c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800277e:	4b8a      	ldr	r3, [pc, #552]	@ (80029a8 <HAL_RCC_ClockConfig+0x260>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 030f 	and.w	r3, r3, #15
 8002786:	683a      	ldr	r2, [r7, #0]
 8002788:	429a      	cmp	r2, r3
 800278a:	d001      	beq.n	8002790 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e106      	b.n	800299e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0301 	and.w	r3, r3, #1
 8002798:	2b00      	cmp	r3, #0
 800279a:	d073      	beq.n	8002884 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	2b03      	cmp	r3, #3
 80027a2:	d129      	bne.n	80027f8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027a4:	4b81      	ldr	r3, [pc, #516]	@ (80029ac <HAL_RCC_ClockConfig+0x264>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d101      	bne.n	80027b4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e0f4      	b.n	800299e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80027b4:	f000 f99e 	bl	8002af4 <RCC_GetSysClockFreqFromPLLSource>
 80027b8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	4a7c      	ldr	r2, [pc, #496]	@ (80029b0 <HAL_RCC_ClockConfig+0x268>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d93f      	bls.n	8002842 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80027c2:	4b7a      	ldr	r3, [pc, #488]	@ (80029ac <HAL_RCC_ClockConfig+0x264>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d009      	beq.n	80027e2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d033      	beq.n	8002842 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d12f      	bne.n	8002842 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80027e2:	4b72      	ldr	r3, [pc, #456]	@ (80029ac <HAL_RCC_ClockConfig+0x264>)
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80027ea:	4a70      	ldr	r2, [pc, #448]	@ (80029ac <HAL_RCC_ClockConfig+0x264>)
 80027ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027f0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80027f2:	2380      	movs	r3, #128	@ 0x80
 80027f4:	617b      	str	r3, [r7, #20]
 80027f6:	e024      	b.n	8002842 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d107      	bne.n	8002810 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002800:	4b6a      	ldr	r3, [pc, #424]	@ (80029ac <HAL_RCC_ClockConfig+0x264>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d109      	bne.n	8002820 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e0c6      	b.n	800299e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002810:	4b66      	ldr	r3, [pc, #408]	@ (80029ac <HAL_RCC_ClockConfig+0x264>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002818:	2b00      	cmp	r3, #0
 800281a:	d101      	bne.n	8002820 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e0be      	b.n	800299e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002820:	f000 f8ce 	bl	80029c0 <HAL_RCC_GetSysClockFreq>
 8002824:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	4a61      	ldr	r2, [pc, #388]	@ (80029b0 <HAL_RCC_ClockConfig+0x268>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d909      	bls.n	8002842 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800282e:	4b5f      	ldr	r3, [pc, #380]	@ (80029ac <HAL_RCC_ClockConfig+0x264>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002836:	4a5d      	ldr	r2, [pc, #372]	@ (80029ac <HAL_RCC_ClockConfig+0x264>)
 8002838:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800283c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800283e:	2380      	movs	r3, #128	@ 0x80
 8002840:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002842:	4b5a      	ldr	r3, [pc, #360]	@ (80029ac <HAL_RCC_ClockConfig+0x264>)
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f023 0203 	bic.w	r2, r3, #3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	4957      	ldr	r1, [pc, #348]	@ (80029ac <HAL_RCC_ClockConfig+0x264>)
 8002850:	4313      	orrs	r3, r2
 8002852:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002854:	f7fe fb12 	bl	8000e7c <HAL_GetTick>
 8002858:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800285a:	e00a      	b.n	8002872 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800285c:	f7fe fb0e 	bl	8000e7c <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	f241 3288 	movw	r2, #5000	@ 0x1388
 800286a:	4293      	cmp	r3, r2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e095      	b.n	800299e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002872:	4b4e      	ldr	r3, [pc, #312]	@ (80029ac <HAL_RCC_ClockConfig+0x264>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f003 020c 	and.w	r2, r3, #12
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	429a      	cmp	r2, r3
 8002882:	d1eb      	bne.n	800285c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0302 	and.w	r3, r3, #2
 800288c:	2b00      	cmp	r3, #0
 800288e:	d023      	beq.n	80028d8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0304 	and.w	r3, r3, #4
 8002898:	2b00      	cmp	r3, #0
 800289a:	d005      	beq.n	80028a8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800289c:	4b43      	ldr	r3, [pc, #268]	@ (80029ac <HAL_RCC_ClockConfig+0x264>)
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	4a42      	ldr	r2, [pc, #264]	@ (80029ac <HAL_RCC_ClockConfig+0x264>)
 80028a2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80028a6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0308 	and.w	r3, r3, #8
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d007      	beq.n	80028c4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80028b4:	4b3d      	ldr	r3, [pc, #244]	@ (80029ac <HAL_RCC_ClockConfig+0x264>)
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80028bc:	4a3b      	ldr	r2, [pc, #236]	@ (80029ac <HAL_RCC_ClockConfig+0x264>)
 80028be:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80028c2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028c4:	4b39      	ldr	r3, [pc, #228]	@ (80029ac <HAL_RCC_ClockConfig+0x264>)
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	4936      	ldr	r1, [pc, #216]	@ (80029ac <HAL_RCC_ClockConfig+0x264>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	608b      	str	r3, [r1, #8]
 80028d6:	e008      	b.n	80028ea <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	2b80      	cmp	r3, #128	@ 0x80
 80028dc:	d105      	bne.n	80028ea <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80028de:	4b33      	ldr	r3, [pc, #204]	@ (80029ac <HAL_RCC_ClockConfig+0x264>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	4a32      	ldr	r2, [pc, #200]	@ (80029ac <HAL_RCC_ClockConfig+0x264>)
 80028e4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80028e8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028ea:	4b2f      	ldr	r3, [pc, #188]	@ (80029a8 <HAL_RCC_ClockConfig+0x260>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 030f 	and.w	r3, r3, #15
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d21d      	bcs.n	8002934 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028f8:	4b2b      	ldr	r3, [pc, #172]	@ (80029a8 <HAL_RCC_ClockConfig+0x260>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f023 020f 	bic.w	r2, r3, #15
 8002900:	4929      	ldr	r1, [pc, #164]	@ (80029a8 <HAL_RCC_ClockConfig+0x260>)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	4313      	orrs	r3, r2
 8002906:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002908:	f7fe fab8 	bl	8000e7c <HAL_GetTick>
 800290c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800290e:	e00a      	b.n	8002926 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002910:	f7fe fab4 	bl	8000e7c <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800291e:	4293      	cmp	r3, r2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e03b      	b.n	800299e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002926:	4b20      	ldr	r3, [pc, #128]	@ (80029a8 <HAL_RCC_ClockConfig+0x260>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 030f 	and.w	r3, r3, #15
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	429a      	cmp	r2, r3
 8002932:	d1ed      	bne.n	8002910 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0304 	and.w	r3, r3, #4
 800293c:	2b00      	cmp	r3, #0
 800293e:	d008      	beq.n	8002952 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002940:	4b1a      	ldr	r3, [pc, #104]	@ (80029ac <HAL_RCC_ClockConfig+0x264>)
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	4917      	ldr	r1, [pc, #92]	@ (80029ac <HAL_RCC_ClockConfig+0x264>)
 800294e:	4313      	orrs	r3, r2
 8002950:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0308 	and.w	r3, r3, #8
 800295a:	2b00      	cmp	r3, #0
 800295c:	d009      	beq.n	8002972 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800295e:	4b13      	ldr	r3, [pc, #76]	@ (80029ac <HAL_RCC_ClockConfig+0x264>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	490f      	ldr	r1, [pc, #60]	@ (80029ac <HAL_RCC_ClockConfig+0x264>)
 800296e:	4313      	orrs	r3, r2
 8002970:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002972:	f000 f825 	bl	80029c0 <HAL_RCC_GetSysClockFreq>
 8002976:	4602      	mov	r2, r0
 8002978:	4b0c      	ldr	r3, [pc, #48]	@ (80029ac <HAL_RCC_ClockConfig+0x264>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	091b      	lsrs	r3, r3, #4
 800297e:	f003 030f 	and.w	r3, r3, #15
 8002982:	490c      	ldr	r1, [pc, #48]	@ (80029b4 <HAL_RCC_ClockConfig+0x26c>)
 8002984:	5ccb      	ldrb	r3, [r1, r3]
 8002986:	f003 031f 	and.w	r3, r3, #31
 800298a:	fa22 f303 	lsr.w	r3, r2, r3
 800298e:	4a0a      	ldr	r2, [pc, #40]	@ (80029b8 <HAL_RCC_ClockConfig+0x270>)
 8002990:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002992:	4b0a      	ldr	r3, [pc, #40]	@ (80029bc <HAL_RCC_ClockConfig+0x274>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4618      	mov	r0, r3
 8002998:	f7fe fa24 	bl	8000de4 <HAL_InitTick>
 800299c:	4603      	mov	r3, r0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3718      	adds	r7, #24
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	40022000 	.word	0x40022000
 80029ac:	40021000 	.word	0x40021000
 80029b0:	04c4b400 	.word	0x04c4b400
 80029b4:	08004a7c 	.word	0x08004a7c
 80029b8:	20000000 	.word	0x20000000
 80029bc:	2000002c 	.word	0x2000002c

080029c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b087      	sub	sp, #28
 80029c4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80029c6:	4b2c      	ldr	r3, [pc, #176]	@ (8002a78 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f003 030c 	and.w	r3, r3, #12
 80029ce:	2b04      	cmp	r3, #4
 80029d0:	d102      	bne.n	80029d8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80029d2:	4b2a      	ldr	r3, [pc, #168]	@ (8002a7c <HAL_RCC_GetSysClockFreq+0xbc>)
 80029d4:	613b      	str	r3, [r7, #16]
 80029d6:	e047      	b.n	8002a68 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80029d8:	4b27      	ldr	r3, [pc, #156]	@ (8002a78 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f003 030c 	and.w	r3, r3, #12
 80029e0:	2b08      	cmp	r3, #8
 80029e2:	d102      	bne.n	80029ea <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80029e4:	4b26      	ldr	r3, [pc, #152]	@ (8002a80 <HAL_RCC_GetSysClockFreq+0xc0>)
 80029e6:	613b      	str	r3, [r7, #16]
 80029e8:	e03e      	b.n	8002a68 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80029ea:	4b23      	ldr	r3, [pc, #140]	@ (8002a78 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f003 030c 	and.w	r3, r3, #12
 80029f2:	2b0c      	cmp	r3, #12
 80029f4:	d136      	bne.n	8002a64 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80029f6:	4b20      	ldr	r3, [pc, #128]	@ (8002a78 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	f003 0303 	and.w	r3, r3, #3
 80029fe:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a00:	4b1d      	ldr	r3, [pc, #116]	@ (8002a78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	091b      	lsrs	r3, r3, #4
 8002a06:	f003 030f 	and.w	r3, r3, #15
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2b03      	cmp	r3, #3
 8002a12:	d10c      	bne.n	8002a2e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a14:	4a1a      	ldr	r2, [pc, #104]	@ (8002a80 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a1c:	4a16      	ldr	r2, [pc, #88]	@ (8002a78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a1e:	68d2      	ldr	r2, [r2, #12]
 8002a20:	0a12      	lsrs	r2, r2, #8
 8002a22:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002a26:	fb02 f303 	mul.w	r3, r2, r3
 8002a2a:	617b      	str	r3, [r7, #20]
      break;
 8002a2c:	e00c      	b.n	8002a48 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a2e:	4a13      	ldr	r2, [pc, #76]	@ (8002a7c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a36:	4a10      	ldr	r2, [pc, #64]	@ (8002a78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a38:	68d2      	ldr	r2, [r2, #12]
 8002a3a:	0a12      	lsrs	r2, r2, #8
 8002a3c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002a40:	fb02 f303 	mul.w	r3, r2, r3
 8002a44:	617b      	str	r3, [r7, #20]
      break;
 8002a46:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a48:	4b0b      	ldr	r3, [pc, #44]	@ (8002a78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	0e5b      	lsrs	r3, r3, #25
 8002a4e:	f003 0303 	and.w	r3, r3, #3
 8002a52:	3301      	adds	r3, #1
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002a58:	697a      	ldr	r2, [r7, #20]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a60:	613b      	str	r3, [r7, #16]
 8002a62:	e001      	b.n	8002a68 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002a64:	2300      	movs	r3, #0
 8002a66:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002a68:	693b      	ldr	r3, [r7, #16]
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	371c      	adds	r7, #28
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	40021000 	.word	0x40021000
 8002a7c:	00f42400 	.word	0x00f42400
 8002a80:	016e3600 	.word	0x016e3600

08002a84 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a88:	4b03      	ldr	r3, [pc, #12]	@ (8002a98 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	20000000 	.word	0x20000000

08002a9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002aa0:	f7ff fff0 	bl	8002a84 <HAL_RCC_GetHCLKFreq>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	4b06      	ldr	r3, [pc, #24]	@ (8002ac0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	0a1b      	lsrs	r3, r3, #8
 8002aac:	f003 0307 	and.w	r3, r3, #7
 8002ab0:	4904      	ldr	r1, [pc, #16]	@ (8002ac4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ab2:	5ccb      	ldrb	r3, [r1, r3]
 8002ab4:	f003 031f 	and.w	r3, r3, #31
 8002ab8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	08004a8c 	.word	0x08004a8c

08002ac8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002acc:	f7ff ffda 	bl	8002a84 <HAL_RCC_GetHCLKFreq>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	4b06      	ldr	r3, [pc, #24]	@ (8002aec <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	0adb      	lsrs	r3, r3, #11
 8002ad8:	f003 0307 	and.w	r3, r3, #7
 8002adc:	4904      	ldr	r1, [pc, #16]	@ (8002af0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ade:	5ccb      	ldrb	r3, [r1, r3]
 8002ae0:	f003 031f 	and.w	r3, r3, #31
 8002ae4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	40021000 	.word	0x40021000
 8002af0:	08004a8c 	.word	0x08004a8c

08002af4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b087      	sub	sp, #28
 8002af8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002afa:	4b1e      	ldr	r3, [pc, #120]	@ (8002b74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	f003 0303 	and.w	r3, r3, #3
 8002b02:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b04:	4b1b      	ldr	r3, [pc, #108]	@ (8002b74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	091b      	lsrs	r3, r3, #4
 8002b0a:	f003 030f 	and.w	r3, r3, #15
 8002b0e:	3301      	adds	r3, #1
 8002b10:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	2b03      	cmp	r3, #3
 8002b16:	d10c      	bne.n	8002b32 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b18:	4a17      	ldr	r2, [pc, #92]	@ (8002b78 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b20:	4a14      	ldr	r2, [pc, #80]	@ (8002b74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b22:	68d2      	ldr	r2, [r2, #12]
 8002b24:	0a12      	lsrs	r2, r2, #8
 8002b26:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002b2a:	fb02 f303 	mul.w	r3, r2, r3
 8002b2e:	617b      	str	r3, [r7, #20]
    break;
 8002b30:	e00c      	b.n	8002b4c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b32:	4a12      	ldr	r2, [pc, #72]	@ (8002b7c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b3a:	4a0e      	ldr	r2, [pc, #56]	@ (8002b74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b3c:	68d2      	ldr	r2, [r2, #12]
 8002b3e:	0a12      	lsrs	r2, r2, #8
 8002b40:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002b44:	fb02 f303 	mul.w	r3, r2, r3
 8002b48:	617b      	str	r3, [r7, #20]
    break;
 8002b4a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b4c:	4b09      	ldr	r3, [pc, #36]	@ (8002b74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	0e5b      	lsrs	r3, r3, #25
 8002b52:	f003 0303 	and.w	r3, r3, #3
 8002b56:	3301      	adds	r3, #1
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002b5c:	697a      	ldr	r2, [r7, #20]
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b64:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002b66:	687b      	ldr	r3, [r7, #4]
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	371c      	adds	r7, #28
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr
 8002b74:	40021000 	.word	0x40021000
 8002b78:	016e3600 	.word	0x016e3600
 8002b7c:	00f42400 	.word	0x00f42400

08002b80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b88:	2300      	movs	r3, #0
 8002b8a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f000 8098 	beq.w	8002cce <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ba2:	4b43      	ldr	r3, [pc, #268]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ba4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ba6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10d      	bne.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bae:	4b40      	ldr	r3, [pc, #256]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bb2:	4a3f      	ldr	r2, [pc, #252]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bb8:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bba:	4b3d      	ldr	r3, [pc, #244]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bc2:	60bb      	str	r3, [r7, #8]
 8002bc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bca:	4b3a      	ldr	r3, [pc, #232]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a39      	ldr	r2, [pc, #228]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002bd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bd4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002bd6:	f7fe f951 	bl	8000e7c <HAL_GetTick>
 8002bda:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bdc:	e009      	b.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bde:	f7fe f94d 	bl	8000e7c <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d902      	bls.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	74fb      	strb	r3, [r7, #19]
        break;
 8002bf0:	e005      	b.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bf2:	4b30      	ldr	r3, [pc, #192]	@ (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d0ef      	beq.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002bfe:	7cfb      	ldrb	r3, [r7, #19]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d159      	bne.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c04:	4b2a      	ldr	r3, [pc, #168]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c0e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d01e      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c1a:	697a      	ldr	r2, [r7, #20]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d019      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c20:	4b23      	ldr	r3, [pc, #140]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c2a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c2c:	4b20      	ldr	r3, [pc, #128]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c32:	4a1f      	ldr	r2, [pc, #124]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c3c:	4b1c      	ldr	r3, [pc, #112]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c42:	4a1b      	ldr	r2, [pc, #108]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c4c:	4a18      	ldr	r2, [pc, #96]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d016      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c5e:	f7fe f90d 	bl	8000e7c <HAL_GetTick>
 8002c62:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c64:	e00b      	b.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c66:	f7fe f909 	bl	8000e7c <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d902      	bls.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	74fb      	strb	r3, [r7, #19]
            break;
 8002c7c:	e006      	b.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c7e:	4b0c      	ldr	r3, [pc, #48]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d0ec      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002c8c:	7cfb      	ldrb	r3, [r7, #19]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d10b      	bne.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c92:	4b07      	ldr	r3, [pc, #28]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c98:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ca0:	4903      	ldr	r1, [pc, #12]	@ (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002ca8:	e008      	b.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002caa:	7cfb      	ldrb	r3, [r7, #19]
 8002cac:	74bb      	strb	r3, [r7, #18]
 8002cae:	e005      	b.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cb8:	7cfb      	ldrb	r3, [r7, #19]
 8002cba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cbc:	7c7b      	ldrb	r3, [r7, #17]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d105      	bne.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cc2:	4ba7      	ldr	r3, [pc, #668]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cc6:	4aa6      	ldr	r2, [pc, #664]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cc8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ccc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00a      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002cda:	4ba1      	ldr	r3, [pc, #644]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ce0:	f023 0203 	bic.w	r2, r3, #3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	499d      	ldr	r1, [pc, #628]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0302 	and.w	r3, r3, #2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d00a      	beq.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002cfc:	4b98      	ldr	r3, [pc, #608]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d02:	f023 020c 	bic.w	r2, r3, #12
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	4995      	ldr	r1, [pc, #596]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0304 	and.w	r3, r3, #4
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00a      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d1e:	4b90      	ldr	r3, [pc, #576]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d24:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	498c      	ldr	r1, [pc, #560]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0308 	and.w	r3, r3, #8
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00a      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d40:	4b87      	ldr	r3, [pc, #540]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d46:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	4984      	ldr	r1, [pc, #528]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0310 	and.w	r3, r3, #16
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00a      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d62:	4b7f      	ldr	r3, [pc, #508]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d68:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	695b      	ldr	r3, [r3, #20]
 8002d70:	497b      	ldr	r1, [pc, #492]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0320 	and.w	r3, r3, #32
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d00a      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d84:	4b76      	ldr	r3, [pc, #472]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d8a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	4973      	ldr	r1, [pc, #460]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00a      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002da6:	4b6e      	ldr	r3, [pc, #440]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dac:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	69db      	ldr	r3, [r3, #28]
 8002db4:	496a      	ldr	r1, [pc, #424]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d00a      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002dc8:	4b65      	ldr	r3, [pc, #404]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dce:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	4962      	ldr	r1, [pc, #392]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d00a      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002dea:	4b5d      	ldr	r3, [pc, #372]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002df0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df8:	4959      	ldr	r1, [pc, #356]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00a      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002e0c:	4b54      	ldr	r3, [pc, #336]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002e12:	f023 0203 	bic.w	r2, r3, #3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e1a:	4951      	ldr	r1, [pc, #324]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d00a      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e2e:	4b4c      	ldr	r3, [pc, #304]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e34:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e3c:	4948      	ldr	r1, [pc, #288]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d015      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e50:	4b43      	ldr	r3, [pc, #268]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e56:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e5e:	4940      	ldr	r1, [pc, #256]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e6e:	d105      	bne.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e70:	4b3b      	ldr	r3, [pc, #236]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	4a3a      	ldr	r2, [pc, #232]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e7a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d015      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002e88:	4b35      	ldr	r3, [pc, #212]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e8e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e96:	4932      	ldr	r1, [pc, #200]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ea2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ea6:	d105      	bne.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ea8:	4b2d      	ldr	r3, [pc, #180]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	4a2c      	ldr	r2, [pc, #176]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002eb2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d015      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002ec0:	4b27      	ldr	r3, [pc, #156]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ec6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ece:	4924      	ldr	r1, [pc, #144]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eda:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ede:	d105      	bne.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ee0:	4b1f      	ldr	r3, [pc, #124]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	4a1e      	ldr	r2, [pc, #120]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ee6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002eea:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d015      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ef8:	4b19      	ldr	r3, [pc, #100]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002efe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f06:	4916      	ldr	r1, [pc, #88]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f12:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f16:	d105      	bne.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f18:	4b11      	ldr	r3, [pc, #68]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	4a10      	ldr	r2, [pc, #64]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f22:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d019      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f30:	4b0b      	ldr	r3, [pc, #44]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f36:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f3e:	4908      	ldr	r1, [pc, #32]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f4a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f4e:	d109      	bne.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f50:	4b03      	ldr	r3, [pc, #12]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	4a02      	ldr	r2, [pc, #8]	@ (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f5a:	60d3      	str	r3, [r2, #12]
 8002f5c:	e002      	b.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002f5e:	bf00      	nop
 8002f60:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d015      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002f70:	4b29      	ldr	r3, [pc, #164]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f76:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f7e:	4926      	ldr	r1, [pc, #152]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f8a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002f8e:	d105      	bne.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002f90:	4b21      	ldr	r3, [pc, #132]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	4a20      	ldr	r2, [pc, #128]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f9a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d015      	beq.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002fa8:	4b1b      	ldr	r3, [pc, #108]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fae:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fb6:	4918      	ldr	r1, [pc, #96]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fc6:	d105      	bne.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002fc8:	4b13      	ldr	r3, [pc, #76]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	4a12      	ldr	r2, [pc, #72]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002fce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fd2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d015      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002fe0:	4b0d      	ldr	r3, [pc, #52]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002fe2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002fe6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fee:	490a      	ldr	r1, [pc, #40]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ffa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002ffe:	d105      	bne.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003000:	4b05      	ldr	r3, [pc, #20]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	4a04      	ldr	r2, [pc, #16]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003006:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800300a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800300c:	7cbb      	ldrb	r3, [r7, #18]
}
 800300e:	4618      	mov	r0, r3
 8003010:	3718      	adds	r7, #24
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	40021000 	.word	0x40021000

0800301c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d101      	bne.n	800302e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e042      	b.n	80030b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003034:	2b00      	cmp	r3, #0
 8003036:	d106      	bne.n	8003046 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f7fd fd07 	bl	8000a54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2224      	movs	r2, #36	@ 0x24
 800304a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f022 0201 	bic.w	r2, r2, #1
 800305c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003062:	2b00      	cmp	r3, #0
 8003064:	d002      	beq.n	800306c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 fefe 	bl	8003e68 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f000 fbff 	bl	8003870 <UART_SetConfig>
 8003072:	4603      	mov	r3, r0
 8003074:	2b01      	cmp	r3, #1
 8003076:	d101      	bne.n	800307c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e01b      	b.n	80030b4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	685a      	ldr	r2, [r3, #4]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800308a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689a      	ldr	r2, [r3, #8]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800309a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f042 0201 	orr.w	r2, r2, #1
 80030aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 ff7d 	bl	8003fac <UART_CheckIdleState>
 80030b2:	4603      	mov	r3, r0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3708      	adds	r7, #8
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b08a      	sub	sp, #40	@ 0x28
 80030c0:	af02      	add	r7, sp, #8
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	603b      	str	r3, [r7, #0]
 80030c8:	4613      	mov	r3, r2
 80030ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030d2:	2b20      	cmp	r3, #32
 80030d4:	d17b      	bne.n	80031ce <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d002      	beq.n	80030e2 <HAL_UART_Transmit+0x26>
 80030dc:	88fb      	ldrh	r3, [r7, #6]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e074      	b.n	80031d0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2221      	movs	r2, #33	@ 0x21
 80030f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030f6:	f7fd fec1 	bl	8000e7c <HAL_GetTick>
 80030fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	88fa      	ldrh	r2, [r7, #6]
 8003100:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	88fa      	ldrh	r2, [r7, #6]
 8003108:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003114:	d108      	bne.n	8003128 <HAL_UART_Transmit+0x6c>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d104      	bne.n	8003128 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800311e:	2300      	movs	r3, #0
 8003120:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	61bb      	str	r3, [r7, #24]
 8003126:	e003      	b.n	8003130 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800312c:	2300      	movs	r3, #0
 800312e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003130:	e030      	b.n	8003194 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	9300      	str	r3, [sp, #0]
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	2200      	movs	r2, #0
 800313a:	2180      	movs	r1, #128	@ 0x80
 800313c:	68f8      	ldr	r0, [r7, #12]
 800313e:	f000 ffdf 	bl	8004100 <UART_WaitOnFlagUntilTimeout>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d005      	beq.n	8003154 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2220      	movs	r2, #32
 800314c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e03d      	b.n	80031d0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d10b      	bne.n	8003172 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	881b      	ldrh	r3, [r3, #0]
 800315e:	461a      	mov	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003168:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	3302      	adds	r3, #2
 800316e:	61bb      	str	r3, [r7, #24]
 8003170:	e007      	b.n	8003182 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	781a      	ldrb	r2, [r3, #0]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	3301      	adds	r3, #1
 8003180:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003188:	b29b      	uxth	r3, r3
 800318a:	3b01      	subs	r3, #1
 800318c:	b29a      	uxth	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800319a:	b29b      	uxth	r3, r3
 800319c:	2b00      	cmp	r3, #0
 800319e:	d1c8      	bne.n	8003132 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	9300      	str	r3, [sp, #0]
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	2200      	movs	r2, #0
 80031a8:	2140      	movs	r1, #64	@ 0x40
 80031aa:	68f8      	ldr	r0, [r7, #12]
 80031ac:	f000 ffa8 	bl	8004100 <UART_WaitOnFlagUntilTimeout>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d005      	beq.n	80031c2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2220      	movs	r2, #32
 80031ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e006      	b.n	80031d0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2220      	movs	r2, #32
 80031c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80031ca:	2300      	movs	r3, #0
 80031cc:	e000      	b.n	80031d0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80031ce:	2302      	movs	r3, #2
  }
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3720      	adds	r7, #32
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b0ba      	sub	sp, #232	@ 0xe8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	69db      	ldr	r3, [r3, #28]
 80031e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80031fe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003202:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003206:	4013      	ands	r3, r2
 8003208:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800320c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003210:	2b00      	cmp	r3, #0
 8003212:	d11b      	bne.n	800324c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003214:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003218:	f003 0320 	and.w	r3, r3, #32
 800321c:	2b00      	cmp	r3, #0
 800321e:	d015      	beq.n	800324c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003220:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003224:	f003 0320 	and.w	r3, r3, #32
 8003228:	2b00      	cmp	r3, #0
 800322a:	d105      	bne.n	8003238 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800322c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003230:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d009      	beq.n	800324c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800323c:	2b00      	cmp	r3, #0
 800323e:	f000 82e3 	beq.w	8003808 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	4798      	blx	r3
      }
      return;
 800324a:	e2dd      	b.n	8003808 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800324c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003250:	2b00      	cmp	r3, #0
 8003252:	f000 8123 	beq.w	800349c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003256:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800325a:	4b8d      	ldr	r3, [pc, #564]	@ (8003490 <HAL_UART_IRQHandler+0x2b8>)
 800325c:	4013      	ands	r3, r2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d106      	bne.n	8003270 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003262:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003266:	4b8b      	ldr	r3, [pc, #556]	@ (8003494 <HAL_UART_IRQHandler+0x2bc>)
 8003268:	4013      	ands	r3, r2
 800326a:	2b00      	cmp	r3, #0
 800326c:	f000 8116 	beq.w	800349c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003270:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003274:	f003 0301 	and.w	r3, r3, #1
 8003278:	2b00      	cmp	r3, #0
 800327a:	d011      	beq.n	80032a0 <HAL_UART_IRQHandler+0xc8>
 800327c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003280:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003284:	2b00      	cmp	r3, #0
 8003286:	d00b      	beq.n	80032a0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2201      	movs	r2, #1
 800328e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003296:	f043 0201 	orr.w	r2, r3, #1
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80032a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032a4:	f003 0302 	and.w	r3, r3, #2
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d011      	beq.n	80032d0 <HAL_UART_IRQHandler+0xf8>
 80032ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032b0:	f003 0301 	and.w	r3, r3, #1
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00b      	beq.n	80032d0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2202      	movs	r2, #2
 80032be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032c6:	f043 0204 	orr.w	r2, r3, #4
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80032d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032d4:	f003 0304 	and.w	r3, r3, #4
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d011      	beq.n	8003300 <HAL_UART_IRQHandler+0x128>
 80032dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032e0:	f003 0301 	and.w	r3, r3, #1
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d00b      	beq.n	8003300 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2204      	movs	r2, #4
 80032ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032f6:	f043 0202 	orr.w	r2, r3, #2
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003304:	f003 0308 	and.w	r3, r3, #8
 8003308:	2b00      	cmp	r3, #0
 800330a:	d017      	beq.n	800333c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800330c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003310:	f003 0320 	and.w	r3, r3, #32
 8003314:	2b00      	cmp	r3, #0
 8003316:	d105      	bne.n	8003324 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003318:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800331c:	4b5c      	ldr	r3, [pc, #368]	@ (8003490 <HAL_UART_IRQHandler+0x2b8>)
 800331e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00b      	beq.n	800333c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2208      	movs	r2, #8
 800332a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003332:	f043 0208 	orr.w	r2, r3, #8
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800333c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003340:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003344:	2b00      	cmp	r3, #0
 8003346:	d012      	beq.n	800336e <HAL_UART_IRQHandler+0x196>
 8003348:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800334c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d00c      	beq.n	800336e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800335c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003364:	f043 0220 	orr.w	r2, r3, #32
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003374:	2b00      	cmp	r3, #0
 8003376:	f000 8249 	beq.w	800380c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800337a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800337e:	f003 0320 	and.w	r3, r3, #32
 8003382:	2b00      	cmp	r3, #0
 8003384:	d013      	beq.n	80033ae <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003386:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800338a:	f003 0320 	and.w	r3, r3, #32
 800338e:	2b00      	cmp	r3, #0
 8003390:	d105      	bne.n	800339e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003392:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003396:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d007      	beq.n	80033ae <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d003      	beq.n	80033ae <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033b4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033c2:	2b40      	cmp	r3, #64	@ 0x40
 80033c4:	d005      	beq.n	80033d2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80033c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80033ca:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d054      	beq.n	800347c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 ffe9 	bl	80043aa <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033e2:	2b40      	cmp	r3, #64	@ 0x40
 80033e4:	d146      	bne.n	8003474 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	3308      	adds	r3, #8
 80033ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80033f4:	e853 3f00 	ldrex	r3, [r3]
 80033f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80033fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003400:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003404:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	3308      	adds	r3, #8
 800340e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003412:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003416:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800341a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800341e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003422:	e841 2300 	strex	r3, r2, [r1]
 8003426:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800342a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1d9      	bne.n	80033e6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003438:	2b00      	cmp	r3, #0
 800343a:	d017      	beq.n	800346c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003442:	4a15      	ldr	r2, [pc, #84]	@ (8003498 <HAL_UART_IRQHandler+0x2c0>)
 8003444:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800344c:	4618      	mov	r0, r3
 800344e:	f7fd ffcf 	bl	80013f0 <HAL_DMA_Abort_IT>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d019      	beq.n	800348c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800345e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8003466:	4610      	mov	r0, r2
 8003468:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800346a:	e00f      	b.n	800348c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f000 f9f5 	bl	800385c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003472:	e00b      	b.n	800348c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f000 f9f1 	bl	800385c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800347a:	e007      	b.n	800348c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 f9ed 	bl	800385c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800348a:	e1bf      	b.n	800380c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800348c:	bf00      	nop
    return;
 800348e:	e1bd      	b.n	800380c <HAL_UART_IRQHandler+0x634>
 8003490:	10000001 	.word	0x10000001
 8003494:	04000120 	.word	0x04000120
 8003498:	08004661 	.word	0x08004661

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	f040 8153 	bne.w	800374c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80034a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034aa:	f003 0310 	and.w	r3, r3, #16
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	f000 814c 	beq.w	800374c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80034b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034b8:	f003 0310 	and.w	r3, r3, #16
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f000 8145 	beq.w	800374c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2210      	movs	r2, #16
 80034c8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034d4:	2b40      	cmp	r3, #64	@ 0x40
 80034d6:	f040 80bb 	bne.w	8003650 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80034e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	f000 818f 	beq.w	8003810 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80034f8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80034fc:	429a      	cmp	r2, r3
 80034fe:	f080 8187 	bcs.w	8003810 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003508:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0320 	and.w	r3, r3, #32
 800351a:	2b00      	cmp	r3, #0
 800351c:	f040 8087 	bne.w	800362e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003528:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800352c:	e853 3f00 	ldrex	r3, [r3]
 8003530:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003534:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003538:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800353c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	461a      	mov	r2, r3
 8003546:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800354a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800354e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003552:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003556:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800355a:	e841 2300 	strex	r3, r2, [r1]
 800355e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003562:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1da      	bne.n	8003520 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	3308      	adds	r3, #8
 8003570:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003572:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003574:	e853 3f00 	ldrex	r3, [r3]
 8003578:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800357a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800357c:	f023 0301 	bic.w	r3, r3, #1
 8003580:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	3308      	adds	r3, #8
 800358a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800358e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003592:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003594:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003596:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800359a:	e841 2300 	strex	r3, r2, [r1]
 800359e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80035a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d1e1      	bne.n	800356a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	3308      	adds	r3, #8
 80035ac:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80035b0:	e853 3f00 	ldrex	r3, [r3]
 80035b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80035b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80035b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80035bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	3308      	adds	r3, #8
 80035c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80035ca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80035cc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ce:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80035d0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80035d2:	e841 2300 	strex	r3, r2, [r1]
 80035d6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80035d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1e3      	bne.n	80035a6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2220      	movs	r2, #32
 80035e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035f4:	e853 3f00 	ldrex	r3, [r3]
 80035f8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80035fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80035fc:	f023 0310 	bic.w	r3, r3, #16
 8003600:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	461a      	mov	r2, r3
 800360a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800360e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003610:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003612:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003614:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003616:	e841 2300 	strex	r3, r2, [r1]
 800361a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800361c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800361e:	2b00      	cmp	r3, #0
 8003620:	d1e4      	bne.n	80035ec <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003628:	4618      	mov	r0, r3
 800362a:	f7fd fe88 	bl	800133e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2202      	movs	r2, #2
 8003632:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003640:	b29b      	uxth	r3, r3
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	b29b      	uxth	r3, r3
 8003646:	4619      	mov	r1, r3
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f7fd fae9 	bl	8000c20 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800364e:	e0df      	b.n	8003810 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800365c:	b29b      	uxth	r3, r3
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800366a:	b29b      	uxth	r3, r3
 800366c:	2b00      	cmp	r3, #0
 800366e:	f000 80d1 	beq.w	8003814 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8003672:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003676:	2b00      	cmp	r3, #0
 8003678:	f000 80cc 	beq.w	8003814 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003684:	e853 3f00 	ldrex	r3, [r3]
 8003688:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800368a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800368c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003690:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	461a      	mov	r2, r3
 800369a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800369e:	647b      	str	r3, [r7, #68]	@ 0x44
 80036a0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80036a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80036a6:	e841 2300 	strex	r3, r2, [r1]
 80036aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80036ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d1e4      	bne.n	800367c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	3308      	adds	r3, #8
 80036b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036bc:	e853 3f00 	ldrex	r3, [r3]
 80036c0:	623b      	str	r3, [r7, #32]
   return(result);
 80036c2:	6a3b      	ldr	r3, [r7, #32]
 80036c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036c8:	f023 0301 	bic.w	r3, r3, #1
 80036cc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	3308      	adds	r3, #8
 80036d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80036da:	633a      	str	r2, [r7, #48]	@ 0x30
 80036dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80036e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036e2:	e841 2300 	strex	r3, r2, [r1]
 80036e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80036e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1e1      	bne.n	80036b2 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2220      	movs	r2, #32
 80036f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	e853 3f00 	ldrex	r3, [r3]
 800370e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f023 0310 	bic.w	r3, r3, #16
 8003716:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	461a      	mov	r2, r3
 8003720:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003724:	61fb      	str	r3, [r7, #28]
 8003726:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003728:	69b9      	ldr	r1, [r7, #24]
 800372a:	69fa      	ldr	r2, [r7, #28]
 800372c:	e841 2300 	strex	r3, r2, [r1]
 8003730:	617b      	str	r3, [r7, #20]
   return(result);
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d1e4      	bne.n	8003702 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2202      	movs	r2, #2
 800373c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800373e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003742:	4619      	mov	r1, r3
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f7fd fa6b 	bl	8000c20 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800374a:	e063      	b.n	8003814 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800374c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003750:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00e      	beq.n	8003776 <HAL_UART_IRQHandler+0x59e>
 8003758:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800375c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d008      	beq.n	8003776 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800376c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 ffb7 	bl	80046e2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003774:	e051      	b.n	800381a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800377a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800377e:	2b00      	cmp	r3, #0
 8003780:	d014      	beq.n	80037ac <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003782:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003786:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800378a:	2b00      	cmp	r3, #0
 800378c:	d105      	bne.n	800379a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800378e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003792:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d008      	beq.n	80037ac <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d03a      	beq.n	8003818 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	4798      	blx	r3
    }
    return;
 80037aa:	e035      	b.n	8003818 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80037ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d009      	beq.n	80037cc <HAL_UART_IRQHandler+0x5f4>
 80037b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d003      	beq.n	80037cc <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f000 ff61 	bl	800468c <UART_EndTransmit_IT>
    return;
 80037ca:	e026      	b.n	800381a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80037cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d009      	beq.n	80037ec <HAL_UART_IRQHandler+0x614>
 80037d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037dc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d003      	beq.n	80037ec <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f000 ff90 	bl	800470a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80037ea:	e016      	b.n	800381a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80037ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d010      	beq.n	800381a <HAL_UART_IRQHandler+0x642>
 80037f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	da0c      	bge.n	800381a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f000 ff78 	bl	80046f6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003806:	e008      	b.n	800381a <HAL_UART_IRQHandler+0x642>
      return;
 8003808:	bf00      	nop
 800380a:	e006      	b.n	800381a <HAL_UART_IRQHandler+0x642>
    return;
 800380c:	bf00      	nop
 800380e:	e004      	b.n	800381a <HAL_UART_IRQHandler+0x642>
      return;
 8003810:	bf00      	nop
 8003812:	e002      	b.n	800381a <HAL_UART_IRQHandler+0x642>
      return;
 8003814:	bf00      	nop
 8003816:	e000      	b.n	800381a <HAL_UART_IRQHandler+0x642>
    return;
 8003818:	bf00      	nop
  }
}
 800381a:	37e8      	adds	r7, #232	@ 0xe8
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003828:	bf00      	nop
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800383c:	bf00      	nop
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003850:	bf00      	nop
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003870:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003874:	b08c      	sub	sp, #48	@ 0x30
 8003876:	af00      	add	r7, sp, #0
 8003878:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800387a:	2300      	movs	r3, #0
 800387c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	689a      	ldr	r2, [r3, #8]
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	431a      	orrs	r2, r3
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	431a      	orrs	r2, r3
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	69db      	ldr	r3, [r3, #28]
 8003894:	4313      	orrs	r3, r2
 8003896:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	4baa      	ldr	r3, [pc, #680]	@ (8003b48 <UART_SetConfig+0x2d8>)
 80038a0:	4013      	ands	r3, r2
 80038a2:	697a      	ldr	r2, [r7, #20]
 80038a4:	6812      	ldr	r2, [r2, #0]
 80038a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80038a8:	430b      	orrs	r3, r1
 80038aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	68da      	ldr	r2, [r3, #12]
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	430a      	orrs	r2, r1
 80038c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a9f      	ldr	r2, [pc, #636]	@ (8003b4c <UART_SetConfig+0x2dc>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d004      	beq.n	80038dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	6a1b      	ldr	r3, [r3, #32]
 80038d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038d8:	4313      	orrs	r3, r2
 80038da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80038e6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80038ea:	697a      	ldr	r2, [r7, #20]
 80038ec:	6812      	ldr	r2, [r2, #0]
 80038ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80038f0:	430b      	orrs	r3, r1
 80038f2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038fa:	f023 010f 	bic.w	r1, r3, #15
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	430a      	orrs	r2, r1
 8003908:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a90      	ldr	r2, [pc, #576]	@ (8003b50 <UART_SetConfig+0x2e0>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d125      	bne.n	8003960 <UART_SetConfig+0xf0>
 8003914:	4b8f      	ldr	r3, [pc, #572]	@ (8003b54 <UART_SetConfig+0x2e4>)
 8003916:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800391a:	f003 0303 	and.w	r3, r3, #3
 800391e:	2b03      	cmp	r3, #3
 8003920:	d81a      	bhi.n	8003958 <UART_SetConfig+0xe8>
 8003922:	a201      	add	r2, pc, #4	@ (adr r2, 8003928 <UART_SetConfig+0xb8>)
 8003924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003928:	08003939 	.word	0x08003939
 800392c:	08003949 	.word	0x08003949
 8003930:	08003941 	.word	0x08003941
 8003934:	08003951 	.word	0x08003951
 8003938:	2301      	movs	r3, #1
 800393a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800393e:	e116      	b.n	8003b6e <UART_SetConfig+0x2fe>
 8003940:	2302      	movs	r3, #2
 8003942:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003946:	e112      	b.n	8003b6e <UART_SetConfig+0x2fe>
 8003948:	2304      	movs	r3, #4
 800394a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800394e:	e10e      	b.n	8003b6e <UART_SetConfig+0x2fe>
 8003950:	2308      	movs	r3, #8
 8003952:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003956:	e10a      	b.n	8003b6e <UART_SetConfig+0x2fe>
 8003958:	2310      	movs	r3, #16
 800395a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800395e:	e106      	b.n	8003b6e <UART_SetConfig+0x2fe>
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a7c      	ldr	r2, [pc, #496]	@ (8003b58 <UART_SetConfig+0x2e8>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d138      	bne.n	80039dc <UART_SetConfig+0x16c>
 800396a:	4b7a      	ldr	r3, [pc, #488]	@ (8003b54 <UART_SetConfig+0x2e4>)
 800396c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003970:	f003 030c 	and.w	r3, r3, #12
 8003974:	2b0c      	cmp	r3, #12
 8003976:	d82d      	bhi.n	80039d4 <UART_SetConfig+0x164>
 8003978:	a201      	add	r2, pc, #4	@ (adr r2, 8003980 <UART_SetConfig+0x110>)
 800397a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800397e:	bf00      	nop
 8003980:	080039b5 	.word	0x080039b5
 8003984:	080039d5 	.word	0x080039d5
 8003988:	080039d5 	.word	0x080039d5
 800398c:	080039d5 	.word	0x080039d5
 8003990:	080039c5 	.word	0x080039c5
 8003994:	080039d5 	.word	0x080039d5
 8003998:	080039d5 	.word	0x080039d5
 800399c:	080039d5 	.word	0x080039d5
 80039a0:	080039bd 	.word	0x080039bd
 80039a4:	080039d5 	.word	0x080039d5
 80039a8:	080039d5 	.word	0x080039d5
 80039ac:	080039d5 	.word	0x080039d5
 80039b0:	080039cd 	.word	0x080039cd
 80039b4:	2300      	movs	r3, #0
 80039b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039ba:	e0d8      	b.n	8003b6e <UART_SetConfig+0x2fe>
 80039bc:	2302      	movs	r3, #2
 80039be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039c2:	e0d4      	b.n	8003b6e <UART_SetConfig+0x2fe>
 80039c4:	2304      	movs	r3, #4
 80039c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039ca:	e0d0      	b.n	8003b6e <UART_SetConfig+0x2fe>
 80039cc:	2308      	movs	r3, #8
 80039ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039d2:	e0cc      	b.n	8003b6e <UART_SetConfig+0x2fe>
 80039d4:	2310      	movs	r3, #16
 80039d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039da:	e0c8      	b.n	8003b6e <UART_SetConfig+0x2fe>
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a5e      	ldr	r2, [pc, #376]	@ (8003b5c <UART_SetConfig+0x2ec>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d125      	bne.n	8003a32 <UART_SetConfig+0x1c2>
 80039e6:	4b5b      	ldr	r3, [pc, #364]	@ (8003b54 <UART_SetConfig+0x2e4>)
 80039e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039ec:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80039f0:	2b30      	cmp	r3, #48	@ 0x30
 80039f2:	d016      	beq.n	8003a22 <UART_SetConfig+0x1b2>
 80039f4:	2b30      	cmp	r3, #48	@ 0x30
 80039f6:	d818      	bhi.n	8003a2a <UART_SetConfig+0x1ba>
 80039f8:	2b20      	cmp	r3, #32
 80039fa:	d00a      	beq.n	8003a12 <UART_SetConfig+0x1a2>
 80039fc:	2b20      	cmp	r3, #32
 80039fe:	d814      	bhi.n	8003a2a <UART_SetConfig+0x1ba>
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d002      	beq.n	8003a0a <UART_SetConfig+0x19a>
 8003a04:	2b10      	cmp	r3, #16
 8003a06:	d008      	beq.n	8003a1a <UART_SetConfig+0x1aa>
 8003a08:	e00f      	b.n	8003a2a <UART_SetConfig+0x1ba>
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a10:	e0ad      	b.n	8003b6e <UART_SetConfig+0x2fe>
 8003a12:	2302      	movs	r3, #2
 8003a14:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a18:	e0a9      	b.n	8003b6e <UART_SetConfig+0x2fe>
 8003a1a:	2304      	movs	r3, #4
 8003a1c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a20:	e0a5      	b.n	8003b6e <UART_SetConfig+0x2fe>
 8003a22:	2308      	movs	r3, #8
 8003a24:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a28:	e0a1      	b.n	8003b6e <UART_SetConfig+0x2fe>
 8003a2a:	2310      	movs	r3, #16
 8003a2c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a30:	e09d      	b.n	8003b6e <UART_SetConfig+0x2fe>
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a4a      	ldr	r2, [pc, #296]	@ (8003b60 <UART_SetConfig+0x2f0>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d125      	bne.n	8003a88 <UART_SetConfig+0x218>
 8003a3c:	4b45      	ldr	r3, [pc, #276]	@ (8003b54 <UART_SetConfig+0x2e4>)
 8003a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a42:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003a46:	2bc0      	cmp	r3, #192	@ 0xc0
 8003a48:	d016      	beq.n	8003a78 <UART_SetConfig+0x208>
 8003a4a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003a4c:	d818      	bhi.n	8003a80 <UART_SetConfig+0x210>
 8003a4e:	2b80      	cmp	r3, #128	@ 0x80
 8003a50:	d00a      	beq.n	8003a68 <UART_SetConfig+0x1f8>
 8003a52:	2b80      	cmp	r3, #128	@ 0x80
 8003a54:	d814      	bhi.n	8003a80 <UART_SetConfig+0x210>
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d002      	beq.n	8003a60 <UART_SetConfig+0x1f0>
 8003a5a:	2b40      	cmp	r3, #64	@ 0x40
 8003a5c:	d008      	beq.n	8003a70 <UART_SetConfig+0x200>
 8003a5e:	e00f      	b.n	8003a80 <UART_SetConfig+0x210>
 8003a60:	2300      	movs	r3, #0
 8003a62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a66:	e082      	b.n	8003b6e <UART_SetConfig+0x2fe>
 8003a68:	2302      	movs	r3, #2
 8003a6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a6e:	e07e      	b.n	8003b6e <UART_SetConfig+0x2fe>
 8003a70:	2304      	movs	r3, #4
 8003a72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a76:	e07a      	b.n	8003b6e <UART_SetConfig+0x2fe>
 8003a78:	2308      	movs	r3, #8
 8003a7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a7e:	e076      	b.n	8003b6e <UART_SetConfig+0x2fe>
 8003a80:	2310      	movs	r3, #16
 8003a82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a86:	e072      	b.n	8003b6e <UART_SetConfig+0x2fe>
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a35      	ldr	r2, [pc, #212]	@ (8003b64 <UART_SetConfig+0x2f4>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d12a      	bne.n	8003ae8 <UART_SetConfig+0x278>
 8003a92:	4b30      	ldr	r3, [pc, #192]	@ (8003b54 <UART_SetConfig+0x2e4>)
 8003a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a98:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a9c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003aa0:	d01a      	beq.n	8003ad8 <UART_SetConfig+0x268>
 8003aa2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003aa6:	d81b      	bhi.n	8003ae0 <UART_SetConfig+0x270>
 8003aa8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003aac:	d00c      	beq.n	8003ac8 <UART_SetConfig+0x258>
 8003aae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ab2:	d815      	bhi.n	8003ae0 <UART_SetConfig+0x270>
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d003      	beq.n	8003ac0 <UART_SetConfig+0x250>
 8003ab8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003abc:	d008      	beq.n	8003ad0 <UART_SetConfig+0x260>
 8003abe:	e00f      	b.n	8003ae0 <UART_SetConfig+0x270>
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ac6:	e052      	b.n	8003b6e <UART_SetConfig+0x2fe>
 8003ac8:	2302      	movs	r3, #2
 8003aca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ace:	e04e      	b.n	8003b6e <UART_SetConfig+0x2fe>
 8003ad0:	2304      	movs	r3, #4
 8003ad2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ad6:	e04a      	b.n	8003b6e <UART_SetConfig+0x2fe>
 8003ad8:	2308      	movs	r3, #8
 8003ada:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ade:	e046      	b.n	8003b6e <UART_SetConfig+0x2fe>
 8003ae0:	2310      	movs	r3, #16
 8003ae2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ae6:	e042      	b.n	8003b6e <UART_SetConfig+0x2fe>
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a17      	ldr	r2, [pc, #92]	@ (8003b4c <UART_SetConfig+0x2dc>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d13a      	bne.n	8003b68 <UART_SetConfig+0x2f8>
 8003af2:	4b18      	ldr	r3, [pc, #96]	@ (8003b54 <UART_SetConfig+0x2e4>)
 8003af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003af8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003afc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003b00:	d01a      	beq.n	8003b38 <UART_SetConfig+0x2c8>
 8003b02:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003b06:	d81b      	bhi.n	8003b40 <UART_SetConfig+0x2d0>
 8003b08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b0c:	d00c      	beq.n	8003b28 <UART_SetConfig+0x2b8>
 8003b0e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b12:	d815      	bhi.n	8003b40 <UART_SetConfig+0x2d0>
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d003      	beq.n	8003b20 <UART_SetConfig+0x2b0>
 8003b18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b1c:	d008      	beq.n	8003b30 <UART_SetConfig+0x2c0>
 8003b1e:	e00f      	b.n	8003b40 <UART_SetConfig+0x2d0>
 8003b20:	2300      	movs	r3, #0
 8003b22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b26:	e022      	b.n	8003b6e <UART_SetConfig+0x2fe>
 8003b28:	2302      	movs	r3, #2
 8003b2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b2e:	e01e      	b.n	8003b6e <UART_SetConfig+0x2fe>
 8003b30:	2304      	movs	r3, #4
 8003b32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b36:	e01a      	b.n	8003b6e <UART_SetConfig+0x2fe>
 8003b38:	2308      	movs	r3, #8
 8003b3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b3e:	e016      	b.n	8003b6e <UART_SetConfig+0x2fe>
 8003b40:	2310      	movs	r3, #16
 8003b42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b46:	e012      	b.n	8003b6e <UART_SetConfig+0x2fe>
 8003b48:	cfff69f3 	.word	0xcfff69f3
 8003b4c:	40008000 	.word	0x40008000
 8003b50:	40013800 	.word	0x40013800
 8003b54:	40021000 	.word	0x40021000
 8003b58:	40004400 	.word	0x40004400
 8003b5c:	40004800 	.word	0x40004800
 8003b60:	40004c00 	.word	0x40004c00
 8003b64:	40005000 	.word	0x40005000
 8003b68:	2310      	movs	r3, #16
 8003b6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4aae      	ldr	r2, [pc, #696]	@ (8003e2c <UART_SetConfig+0x5bc>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	f040 8097 	bne.w	8003ca8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003b7a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003b7e:	2b08      	cmp	r3, #8
 8003b80:	d823      	bhi.n	8003bca <UART_SetConfig+0x35a>
 8003b82:	a201      	add	r2, pc, #4	@ (adr r2, 8003b88 <UART_SetConfig+0x318>)
 8003b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b88:	08003bad 	.word	0x08003bad
 8003b8c:	08003bcb 	.word	0x08003bcb
 8003b90:	08003bb5 	.word	0x08003bb5
 8003b94:	08003bcb 	.word	0x08003bcb
 8003b98:	08003bbb 	.word	0x08003bbb
 8003b9c:	08003bcb 	.word	0x08003bcb
 8003ba0:	08003bcb 	.word	0x08003bcb
 8003ba4:	08003bcb 	.word	0x08003bcb
 8003ba8:	08003bc3 	.word	0x08003bc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bac:	f7fe ff76 	bl	8002a9c <HAL_RCC_GetPCLK1Freq>
 8003bb0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003bb2:	e010      	b.n	8003bd6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bb4:	4b9e      	ldr	r3, [pc, #632]	@ (8003e30 <UART_SetConfig+0x5c0>)
 8003bb6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003bb8:	e00d      	b.n	8003bd6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bba:	f7fe ff01 	bl	80029c0 <HAL_RCC_GetSysClockFreq>
 8003bbe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003bc0:	e009      	b.n	8003bd6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003bc6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003bc8:	e005      	b.n	8003bd6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003bd4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	f000 8130 	beq.w	8003e3e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be2:	4a94      	ldr	r2, [pc, #592]	@ (8003e34 <UART_SetConfig+0x5c4>)
 8003be4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003be8:	461a      	mov	r2, r3
 8003bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bec:	fbb3 f3f2 	udiv	r3, r3, r2
 8003bf0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	685a      	ldr	r2, [r3, #4]
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	005b      	lsls	r3, r3, #1
 8003bfa:	4413      	add	r3, r2
 8003bfc:	69ba      	ldr	r2, [r7, #24]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d305      	bcc.n	8003c0e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003c08:	69ba      	ldr	r2, [r7, #24]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d903      	bls.n	8003c16 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003c14:	e113      	b.n	8003e3e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c18:	2200      	movs	r2, #0
 8003c1a:	60bb      	str	r3, [r7, #8]
 8003c1c:	60fa      	str	r2, [r7, #12]
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c22:	4a84      	ldr	r2, [pc, #528]	@ (8003e34 <UART_SetConfig+0x5c4>)
 8003c24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	603b      	str	r3, [r7, #0]
 8003c2e:	607a      	str	r2, [r7, #4]
 8003c30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c34:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003c38:	f7fc faee 	bl	8000218 <__aeabi_uldivmod>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	460b      	mov	r3, r1
 8003c40:	4610      	mov	r0, r2
 8003c42:	4619      	mov	r1, r3
 8003c44:	f04f 0200 	mov.w	r2, #0
 8003c48:	f04f 0300 	mov.w	r3, #0
 8003c4c:	020b      	lsls	r3, r1, #8
 8003c4e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003c52:	0202      	lsls	r2, r0, #8
 8003c54:	6979      	ldr	r1, [r7, #20]
 8003c56:	6849      	ldr	r1, [r1, #4]
 8003c58:	0849      	lsrs	r1, r1, #1
 8003c5a:	2000      	movs	r0, #0
 8003c5c:	460c      	mov	r4, r1
 8003c5e:	4605      	mov	r5, r0
 8003c60:	eb12 0804 	adds.w	r8, r2, r4
 8003c64:	eb43 0905 	adc.w	r9, r3, r5
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	469a      	mov	sl, r3
 8003c70:	4693      	mov	fp, r2
 8003c72:	4652      	mov	r2, sl
 8003c74:	465b      	mov	r3, fp
 8003c76:	4640      	mov	r0, r8
 8003c78:	4649      	mov	r1, r9
 8003c7a:	f7fc facd 	bl	8000218 <__aeabi_uldivmod>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	460b      	mov	r3, r1
 8003c82:	4613      	mov	r3, r2
 8003c84:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003c86:	6a3b      	ldr	r3, [r7, #32]
 8003c88:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c8c:	d308      	bcc.n	8003ca0 <UART_SetConfig+0x430>
 8003c8e:	6a3b      	ldr	r3, [r7, #32]
 8003c90:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c94:	d204      	bcs.n	8003ca0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	6a3a      	ldr	r2, [r7, #32]
 8003c9c:	60da      	str	r2, [r3, #12]
 8003c9e:	e0ce      	b.n	8003e3e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003ca6:	e0ca      	b.n	8003e3e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	69db      	ldr	r3, [r3, #28]
 8003cac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003cb0:	d166      	bne.n	8003d80 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003cb2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003cb6:	2b08      	cmp	r3, #8
 8003cb8:	d827      	bhi.n	8003d0a <UART_SetConfig+0x49a>
 8003cba:	a201      	add	r2, pc, #4	@ (adr r2, 8003cc0 <UART_SetConfig+0x450>)
 8003cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc0:	08003ce5 	.word	0x08003ce5
 8003cc4:	08003ced 	.word	0x08003ced
 8003cc8:	08003cf5 	.word	0x08003cf5
 8003ccc:	08003d0b 	.word	0x08003d0b
 8003cd0:	08003cfb 	.word	0x08003cfb
 8003cd4:	08003d0b 	.word	0x08003d0b
 8003cd8:	08003d0b 	.word	0x08003d0b
 8003cdc:	08003d0b 	.word	0x08003d0b
 8003ce0:	08003d03 	.word	0x08003d03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ce4:	f7fe feda 	bl	8002a9c <HAL_RCC_GetPCLK1Freq>
 8003ce8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003cea:	e014      	b.n	8003d16 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cec:	f7fe feec 	bl	8002ac8 <HAL_RCC_GetPCLK2Freq>
 8003cf0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003cf2:	e010      	b.n	8003d16 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cf4:	4b4e      	ldr	r3, [pc, #312]	@ (8003e30 <UART_SetConfig+0x5c0>)
 8003cf6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003cf8:	e00d      	b.n	8003d16 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cfa:	f7fe fe61 	bl	80029c0 <HAL_RCC_GetSysClockFreq>
 8003cfe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003d00:	e009      	b.n	8003d16 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d06:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003d08:	e005      	b.n	8003d16 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003d14:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	f000 8090 	beq.w	8003e3e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d22:	4a44      	ldr	r2, [pc, #272]	@ (8003e34 <UART_SetConfig+0x5c4>)
 8003d24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d28:	461a      	mov	r2, r3
 8003d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d30:	005a      	lsls	r2, r3, #1
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	085b      	lsrs	r3, r3, #1
 8003d38:	441a      	add	r2, r3
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d42:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d44:	6a3b      	ldr	r3, [r7, #32]
 8003d46:	2b0f      	cmp	r3, #15
 8003d48:	d916      	bls.n	8003d78 <UART_SetConfig+0x508>
 8003d4a:	6a3b      	ldr	r3, [r7, #32]
 8003d4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d50:	d212      	bcs.n	8003d78 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d52:	6a3b      	ldr	r3, [r7, #32]
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	f023 030f 	bic.w	r3, r3, #15
 8003d5a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d5c:	6a3b      	ldr	r3, [r7, #32]
 8003d5e:	085b      	lsrs	r3, r3, #1
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	f003 0307 	and.w	r3, r3, #7
 8003d66:	b29a      	uxth	r2, r3
 8003d68:	8bfb      	ldrh	r3, [r7, #30]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	8bfa      	ldrh	r2, [r7, #30]
 8003d74:	60da      	str	r2, [r3, #12]
 8003d76:	e062      	b.n	8003e3e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003d7e:	e05e      	b.n	8003e3e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d80:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003d84:	2b08      	cmp	r3, #8
 8003d86:	d828      	bhi.n	8003dda <UART_SetConfig+0x56a>
 8003d88:	a201      	add	r2, pc, #4	@ (adr r2, 8003d90 <UART_SetConfig+0x520>)
 8003d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d8e:	bf00      	nop
 8003d90:	08003db5 	.word	0x08003db5
 8003d94:	08003dbd 	.word	0x08003dbd
 8003d98:	08003dc5 	.word	0x08003dc5
 8003d9c:	08003ddb 	.word	0x08003ddb
 8003da0:	08003dcb 	.word	0x08003dcb
 8003da4:	08003ddb 	.word	0x08003ddb
 8003da8:	08003ddb 	.word	0x08003ddb
 8003dac:	08003ddb 	.word	0x08003ddb
 8003db0:	08003dd3 	.word	0x08003dd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003db4:	f7fe fe72 	bl	8002a9c <HAL_RCC_GetPCLK1Freq>
 8003db8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003dba:	e014      	b.n	8003de6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003dbc:	f7fe fe84 	bl	8002ac8 <HAL_RCC_GetPCLK2Freq>
 8003dc0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003dc2:	e010      	b.n	8003de6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dc4:	4b1a      	ldr	r3, [pc, #104]	@ (8003e30 <UART_SetConfig+0x5c0>)
 8003dc6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003dc8:	e00d      	b.n	8003de6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dca:	f7fe fdf9 	bl	80029c0 <HAL_RCC_GetSysClockFreq>
 8003dce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003dd0:	e009      	b.n	8003de6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003dd6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003dd8:	e005      	b.n	8003de6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003de4:	bf00      	nop
    }

    if (pclk != 0U)
 8003de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d028      	beq.n	8003e3e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df0:	4a10      	ldr	r2, [pc, #64]	@ (8003e34 <UART_SetConfig+0x5c4>)
 8003df2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003df6:	461a      	mov	r2, r3
 8003df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dfa:	fbb3 f2f2 	udiv	r2, r3, r2
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	085b      	lsrs	r3, r3, #1
 8003e04:	441a      	add	r2, r3
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e0e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e10:	6a3b      	ldr	r3, [r7, #32]
 8003e12:	2b0f      	cmp	r3, #15
 8003e14:	d910      	bls.n	8003e38 <UART_SetConfig+0x5c8>
 8003e16:	6a3b      	ldr	r3, [r7, #32]
 8003e18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e1c:	d20c      	bcs.n	8003e38 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e1e:	6a3b      	ldr	r3, [r7, #32]
 8003e20:	b29a      	uxth	r2, r3
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	60da      	str	r2, [r3, #12]
 8003e28:	e009      	b.n	8003e3e <UART_SetConfig+0x5ce>
 8003e2a:	bf00      	nop
 8003e2c:	40008000 	.word	0x40008000
 8003e30:	00f42400 	.word	0x00f42400
 8003e34:	08004aa4 	.word	0x08004aa4
      }
      else
      {
        ret = HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	2201      	movs	r2, #1
 8003e42:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	2200      	movs	r2, #0
 8003e52:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	2200      	movs	r2, #0
 8003e58:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003e5a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3730      	adds	r7, #48	@ 0x30
 8003e62:	46bd      	mov	sp, r7
 8003e64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003e68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e74:	f003 0308 	and.w	r3, r3, #8
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d00a      	beq.n	8003e92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	430a      	orrs	r2, r1
 8003e90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e96:	f003 0301 	and.w	r3, r3, #1
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00a      	beq.n	8003eb4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	430a      	orrs	r2, r1
 8003eb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eb8:	f003 0302 	and.w	r3, r3, #2
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d00a      	beq.n	8003ed6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	430a      	orrs	r2, r1
 8003ed4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eda:	f003 0304 	and.w	r3, r3, #4
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00a      	beq.n	8003ef8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	430a      	orrs	r2, r1
 8003ef6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003efc:	f003 0310 	and.w	r3, r3, #16
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00a      	beq.n	8003f1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	430a      	orrs	r2, r1
 8003f18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f1e:	f003 0320 	and.w	r3, r3, #32
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00a      	beq.n	8003f3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	430a      	orrs	r2, r1
 8003f3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d01a      	beq.n	8003f7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	430a      	orrs	r2, r1
 8003f5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f66:	d10a      	bne.n	8003f7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	430a      	orrs	r2, r1
 8003f7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00a      	beq.n	8003fa0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	430a      	orrs	r2, r1
 8003f9e:	605a      	str	r2, [r3, #4]
  }
}
 8003fa0:	bf00      	nop
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b098      	sub	sp, #96	@ 0x60
 8003fb0:	af02      	add	r7, sp, #8
 8003fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003fbc:	f7fc ff5e 	bl	8000e7c <HAL_GetTick>
 8003fc0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0308 	and.w	r3, r3, #8
 8003fcc:	2b08      	cmp	r3, #8
 8003fce:	d12f      	bne.n	8004030 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fd0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003fd4:	9300      	str	r3, [sp, #0]
 8003fd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 f88e 	bl	8004100 <UART_WaitOnFlagUntilTimeout>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d022      	beq.n	8004030 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ff2:	e853 3f00 	ldrex	r3, [r3]
 8003ff6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003ff8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ffa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ffe:	653b      	str	r3, [r7, #80]	@ 0x50
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	461a      	mov	r2, r3
 8004006:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004008:	647b      	str	r3, [r7, #68]	@ 0x44
 800400a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800400e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004010:	e841 2300 	strex	r3, r2, [r1]
 8004014:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004016:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004018:	2b00      	cmp	r3, #0
 800401a:	d1e6      	bne.n	8003fea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2220      	movs	r2, #32
 8004020:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e063      	b.n	80040f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0304 	and.w	r3, r3, #4
 800403a:	2b04      	cmp	r3, #4
 800403c:	d149      	bne.n	80040d2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800403e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004042:	9300      	str	r3, [sp, #0]
 8004044:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004046:	2200      	movs	r2, #0
 8004048:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f000 f857 	bl	8004100 <UART_WaitOnFlagUntilTimeout>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d03c      	beq.n	80040d2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800405e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004060:	e853 3f00 	ldrex	r3, [r3]
 8004064:	623b      	str	r3, [r7, #32]
   return(result);
 8004066:	6a3b      	ldr	r3, [r7, #32]
 8004068:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800406c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	461a      	mov	r2, r3
 8004074:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004076:	633b      	str	r3, [r7, #48]	@ 0x30
 8004078:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800407a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800407c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800407e:	e841 2300 	strex	r3, r2, [r1]
 8004082:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1e6      	bne.n	8004058 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	3308      	adds	r3, #8
 8004090:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	e853 3f00 	ldrex	r3, [r3]
 8004098:	60fb      	str	r3, [r7, #12]
   return(result);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f023 0301 	bic.w	r3, r3, #1
 80040a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	3308      	adds	r3, #8
 80040a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80040aa:	61fa      	str	r2, [r7, #28]
 80040ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ae:	69b9      	ldr	r1, [r7, #24]
 80040b0:	69fa      	ldr	r2, [r7, #28]
 80040b2:	e841 2300 	strex	r3, r2, [r1]
 80040b6:	617b      	str	r3, [r7, #20]
   return(result);
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d1e5      	bne.n	800408a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2220      	movs	r2, #32
 80040c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e012      	b.n	80040f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2220      	movs	r2, #32
 80040d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2220      	movs	r2, #32
 80040de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80040f6:	2300      	movs	r3, #0
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3758      	adds	r7, #88	@ 0x58
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	603b      	str	r3, [r7, #0]
 800410c:	4613      	mov	r3, r2
 800410e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004110:	e04f      	b.n	80041b2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004118:	d04b      	beq.n	80041b2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800411a:	f7fc feaf 	bl	8000e7c <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	69ba      	ldr	r2, [r7, #24]
 8004126:	429a      	cmp	r2, r3
 8004128:	d302      	bcc.n	8004130 <UART_WaitOnFlagUntilTimeout+0x30>
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d101      	bne.n	8004134 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	e04e      	b.n	80041d2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0304 	and.w	r3, r3, #4
 800413e:	2b00      	cmp	r3, #0
 8004140:	d037      	beq.n	80041b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	2b80      	cmp	r3, #128	@ 0x80
 8004146:	d034      	beq.n	80041b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	2b40      	cmp	r3, #64	@ 0x40
 800414c:	d031      	beq.n	80041b2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	69db      	ldr	r3, [r3, #28]
 8004154:	f003 0308 	and.w	r3, r3, #8
 8004158:	2b08      	cmp	r3, #8
 800415a:	d110      	bne.n	800417e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2208      	movs	r2, #8
 8004162:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004164:	68f8      	ldr	r0, [r7, #12]
 8004166:	f000 f920 	bl	80043aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2208      	movs	r2, #8
 800416e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e029      	b.n	80041d2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	69db      	ldr	r3, [r3, #28]
 8004184:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004188:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800418c:	d111      	bne.n	80041b2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004196:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004198:	68f8      	ldr	r0, [r7, #12]
 800419a:	f000 f906 	bl	80043aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2220      	movs	r2, #32
 80041a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e00f      	b.n	80041d2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	69da      	ldr	r2, [r3, #28]
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	4013      	ands	r3, r2
 80041bc:	68ba      	ldr	r2, [r7, #8]
 80041be:	429a      	cmp	r2, r3
 80041c0:	bf0c      	ite	eq
 80041c2:	2301      	moveq	r3, #1
 80041c4:	2300      	movne	r3, #0
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	461a      	mov	r2, r3
 80041ca:	79fb      	ldrb	r3, [r7, #7]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d0a0      	beq.n	8004112 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3710      	adds	r7, #16
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
	...

080041dc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b096      	sub	sp, #88	@ 0x58
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	4613      	mov	r3, r2
 80041e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	68ba      	ldr	r2, [r7, #8]
 80041ee:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	88fa      	ldrh	r2, [r7, #6]
 80041f4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2222      	movs	r2, #34	@ 0x22
 8004204:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800420e:	2b00      	cmp	r3, #0
 8004210:	d02d      	beq.n	800426e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004218:	4a40      	ldr	r2, [pc, #256]	@ (800431c <UART_Start_Receive_DMA+0x140>)
 800421a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004222:	4a3f      	ldr	r2, [pc, #252]	@ (8004320 <UART_Start_Receive_DMA+0x144>)
 8004224:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800422c:	4a3d      	ldr	r2, [pc, #244]	@ (8004324 <UART_Start_Receive_DMA+0x148>)
 800422e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004236:	2200      	movs	r2, #0
 8004238:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	3324      	adds	r3, #36	@ 0x24
 8004246:	4619      	mov	r1, r3
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800424c:	461a      	mov	r2, r3
 800424e:	88fb      	ldrh	r3, [r7, #6]
 8004250:	f7fc fffa 	bl	8001248 <HAL_DMA_Start_IT>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d009      	beq.n	800426e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2210      	movs	r2, #16
 800425e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2220      	movs	r2, #32
 8004266:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e051      	b.n	8004312 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d018      	beq.n	80042a8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800427c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800427e:	e853 3f00 	ldrex	r3, [r3]
 8004282:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004286:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800428a:	657b      	str	r3, [r7, #84]	@ 0x54
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	461a      	mov	r2, r3
 8004292:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004294:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004296:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004298:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800429a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800429c:	e841 2300 	strex	r3, r2, [r1]
 80042a0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80042a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d1e6      	bne.n	8004276 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	3308      	adds	r3, #8
 80042ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042b2:	e853 3f00 	ldrex	r3, [r3]
 80042b6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80042b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ba:	f043 0301 	orr.w	r3, r3, #1
 80042be:	653b      	str	r3, [r7, #80]	@ 0x50
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	3308      	adds	r3, #8
 80042c6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80042c8:	637a      	str	r2, [r7, #52]	@ 0x34
 80042ca:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042cc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80042ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80042d0:	e841 2300 	strex	r3, r2, [r1]
 80042d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80042d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d1e5      	bne.n	80042a8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	3308      	adds	r3, #8
 80042e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	e853 3f00 	ldrex	r3, [r3]
 80042ea:	613b      	str	r3, [r7, #16]
   return(result);
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80042f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	3308      	adds	r3, #8
 80042fa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80042fc:	623a      	str	r2, [r7, #32]
 80042fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004300:	69f9      	ldr	r1, [r7, #28]
 8004302:	6a3a      	ldr	r2, [r7, #32]
 8004304:	e841 2300 	strex	r3, r2, [r1]
 8004308:	61bb      	str	r3, [r7, #24]
   return(result);
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d1e5      	bne.n	80042dc <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3758      	adds	r7, #88	@ 0x58
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	08004477 	.word	0x08004477
 8004320:	080045a3 	.word	0x080045a3
 8004324:	080045e1 	.word	0x080045e1

08004328 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004328:	b480      	push	{r7}
 800432a:	b08f      	sub	sp, #60	@ 0x3c
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004336:	6a3b      	ldr	r3, [r7, #32]
 8004338:	e853 3f00 	ldrex	r3, [r3]
 800433c:	61fb      	str	r3, [r7, #28]
   return(result);
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004344:	637b      	str	r3, [r7, #52]	@ 0x34
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	461a      	mov	r2, r3
 800434c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800434e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004350:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004352:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004354:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004356:	e841 2300 	strex	r3, r2, [r1]
 800435a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800435c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1e6      	bne.n	8004330 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	3308      	adds	r3, #8
 8004368:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	e853 3f00 	ldrex	r3, [r3]
 8004370:	60bb      	str	r3, [r7, #8]
   return(result);
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004378:	633b      	str	r3, [r7, #48]	@ 0x30
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	3308      	adds	r3, #8
 8004380:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004382:	61ba      	str	r2, [r7, #24]
 8004384:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004386:	6979      	ldr	r1, [r7, #20]
 8004388:	69ba      	ldr	r2, [r7, #24]
 800438a:	e841 2300 	strex	r3, r2, [r1]
 800438e:	613b      	str	r3, [r7, #16]
   return(result);
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1e5      	bne.n	8004362 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2220      	movs	r2, #32
 800439a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800439e:	bf00      	nop
 80043a0:	373c      	adds	r7, #60	@ 0x3c
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr

080043aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043aa:	b480      	push	{r7}
 80043ac:	b095      	sub	sp, #84	@ 0x54
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043ba:	e853 3f00 	ldrex	r3, [r3]
 80043be:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80043c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	461a      	mov	r2, r3
 80043ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80043d2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80043d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80043d8:	e841 2300 	strex	r3, r2, [r1]
 80043dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80043de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d1e6      	bne.n	80043b2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	3308      	adds	r3, #8
 80043ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ec:	6a3b      	ldr	r3, [r7, #32]
 80043ee:	e853 3f00 	ldrex	r3, [r3]
 80043f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043fa:	f023 0301 	bic.w	r3, r3, #1
 80043fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	3308      	adds	r3, #8
 8004406:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004408:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800440a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800440c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800440e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004410:	e841 2300 	strex	r3, r2, [r1]
 8004414:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004418:	2b00      	cmp	r3, #0
 800441a:	d1e3      	bne.n	80043e4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004420:	2b01      	cmp	r3, #1
 8004422:	d118      	bne.n	8004456 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	e853 3f00 	ldrex	r3, [r3]
 8004430:	60bb      	str	r3, [r7, #8]
   return(result);
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	f023 0310 	bic.w	r3, r3, #16
 8004438:	647b      	str	r3, [r7, #68]	@ 0x44
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	461a      	mov	r2, r3
 8004440:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004442:	61bb      	str	r3, [r7, #24]
 8004444:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004446:	6979      	ldr	r1, [r7, #20]
 8004448:	69ba      	ldr	r2, [r7, #24]
 800444a:	e841 2300 	strex	r3, r2, [r1]
 800444e:	613b      	str	r3, [r7, #16]
   return(result);
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1e6      	bne.n	8004424 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2220      	movs	r2, #32
 800445a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800446a:	bf00      	nop
 800446c:	3754      	adds	r7, #84	@ 0x54
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr

08004476 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004476:	b580      	push	{r7, lr}
 8004478:	b09c      	sub	sp, #112	@ 0x70
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004482:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0320 	and.w	r3, r3, #32
 800448e:	2b00      	cmp	r3, #0
 8004490:	d171      	bne.n	8004576 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8004492:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004494:	2200      	movs	r2, #0
 8004496:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800449a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044a2:	e853 3f00 	ldrex	r3, [r3]
 80044a6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80044a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044aa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80044ae:	66bb      	str	r3, [r7, #104]	@ 0x68
 80044b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	461a      	mov	r2, r3
 80044b6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80044b8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80044ba:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044bc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80044be:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80044c0:	e841 2300 	strex	r3, r2, [r1]
 80044c4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80044c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d1e6      	bne.n	800449a <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	3308      	adds	r3, #8
 80044d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044d6:	e853 3f00 	ldrex	r3, [r3]
 80044da:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80044dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044de:	f023 0301 	bic.w	r3, r3, #1
 80044e2:	667b      	str	r3, [r7, #100]	@ 0x64
 80044e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	3308      	adds	r3, #8
 80044ea:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80044ec:	647a      	str	r2, [r7, #68]	@ 0x44
 80044ee:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80044f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80044f4:	e841 2300 	strex	r3, r2, [r1]
 80044f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80044fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d1e5      	bne.n	80044cc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004500:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	3308      	adds	r3, #8
 8004506:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800450a:	e853 3f00 	ldrex	r3, [r3]
 800450e:	623b      	str	r3, [r7, #32]
   return(result);
 8004510:	6a3b      	ldr	r3, [r7, #32]
 8004512:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004516:	663b      	str	r3, [r7, #96]	@ 0x60
 8004518:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	3308      	adds	r3, #8
 800451e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004520:	633a      	str	r2, [r7, #48]	@ 0x30
 8004522:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004524:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004526:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004528:	e841 2300 	strex	r3, r2, [r1]
 800452c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800452e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004530:	2b00      	cmp	r3, #0
 8004532:	d1e5      	bne.n	8004500 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004534:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004536:	2220      	movs	r2, #32
 8004538:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800453c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800453e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004540:	2b01      	cmp	r3, #1
 8004542:	d118      	bne.n	8004576 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004544:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	e853 3f00 	ldrex	r3, [r3]
 8004550:	60fb      	str	r3, [r7, #12]
   return(result);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f023 0310 	bic.w	r3, r3, #16
 8004558:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800455a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	461a      	mov	r2, r3
 8004560:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004562:	61fb      	str	r3, [r7, #28]
 8004564:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004566:	69b9      	ldr	r1, [r7, #24]
 8004568:	69fa      	ldr	r2, [r7, #28]
 800456a:	e841 2300 	strex	r3, r2, [r1]
 800456e:	617b      	str	r3, [r7, #20]
   return(result);
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d1e6      	bne.n	8004544 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004576:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004578:	2200      	movs	r2, #0
 800457a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800457c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800457e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004580:	2b01      	cmp	r3, #1
 8004582:	d107      	bne.n	8004594 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004584:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004586:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800458a:	4619      	mov	r1, r3
 800458c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800458e:	f7fc fb47 	bl	8000c20 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004592:	e002      	b.n	800459a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004594:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004596:	f7ff f94d 	bl	8003834 <HAL_UART_RxCpltCallback>
}
 800459a:	bf00      	nop
 800459c:	3770      	adds	r7, #112	@ 0x70
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b084      	sub	sp, #16
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ae:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2201      	movs	r2, #1
 80045b4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d109      	bne.n	80045d2 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80045c4:	085b      	lsrs	r3, r3, #1
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	4619      	mov	r1, r3
 80045ca:	68f8      	ldr	r0, [r7, #12]
 80045cc:	f7fc fb28 	bl	8000c20 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80045d0:	e002      	b.n	80045d8 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80045d2:	68f8      	ldr	r0, [r7, #12]
 80045d4:	f7ff f938 	bl	8003848 <HAL_UART_RxHalfCpltCallback>
}
 80045d8:	bf00      	nop
 80045da:	3710      	adds	r7, #16
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b086      	sub	sp, #24
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ec:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045f4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80045fc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004608:	2b80      	cmp	r3, #128	@ 0x80
 800460a:	d109      	bne.n	8004620 <UART_DMAError+0x40>
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	2b21      	cmp	r3, #33	@ 0x21
 8004610:	d106      	bne.n	8004620 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	2200      	movs	r2, #0
 8004616:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800461a:	6978      	ldr	r0, [r7, #20]
 800461c:	f7ff fe84 	bl	8004328 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800462a:	2b40      	cmp	r3, #64	@ 0x40
 800462c:	d109      	bne.n	8004642 <UART_DMAError+0x62>
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2b22      	cmp	r3, #34	@ 0x22
 8004632:	d106      	bne.n	8004642 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	2200      	movs	r2, #0
 8004638:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800463c:	6978      	ldr	r0, [r7, #20]
 800463e:	f7ff feb4 	bl	80043aa <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004648:	f043 0210 	orr.w	r2, r3, #16
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004652:	6978      	ldr	r0, [r7, #20]
 8004654:	f7ff f902 	bl	800385c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004658:	bf00      	nop
 800465a:	3718      	adds	r7, #24
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800466c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2200      	movs	r2, #0
 8004672:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800467e:	68f8      	ldr	r0, [r7, #12]
 8004680:	f7ff f8ec 	bl	800385c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004684:	bf00      	nop
 8004686:	3710      	adds	r7, #16
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b088      	sub	sp, #32
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	e853 3f00 	ldrex	r3, [r3]
 80046a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046a8:	61fb      	str	r3, [r7, #28]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	461a      	mov	r2, r3
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	61bb      	str	r3, [r7, #24]
 80046b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b6:	6979      	ldr	r1, [r7, #20]
 80046b8:	69ba      	ldr	r2, [r7, #24]
 80046ba:	e841 2300 	strex	r3, r2, [r1]
 80046be:	613b      	str	r3, [r7, #16]
   return(result);
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1e6      	bne.n	8004694 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2220      	movs	r2, #32
 80046ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f7ff f8a3 	bl	8003820 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046da:	bf00      	nop
 80046dc:	3720      	adds	r7, #32
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}

080046e2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80046e2:	b480      	push	{r7}
 80046e4:	b083      	sub	sp, #12
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80046ea:	bf00      	nop
 80046ec:	370c      	adds	r7, #12
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr

080046f6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80046f6:	b480      	push	{r7}
 80046f8:	b083      	sub	sp, #12
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80046fe:	bf00      	nop
 8004700:	370c      	adds	r7, #12
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr

0800470a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800470a:	b480      	push	{r7}
 800470c:	b083      	sub	sp, #12
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004712:	bf00      	nop
 8004714:	370c      	adds	r7, #12
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr

0800471e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800471e:	b480      	push	{r7}
 8004720:	b085      	sub	sp, #20
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800472c:	2b01      	cmp	r3, #1
 800472e:	d101      	bne.n	8004734 <HAL_UARTEx_DisableFifoMode+0x16>
 8004730:	2302      	movs	r3, #2
 8004732:	e027      	b.n	8004784 <HAL_UARTEx_DisableFifoMode+0x66>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2224      	movs	r2, #36	@ 0x24
 8004740:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f022 0201 	bic.w	r2, r2, #1
 800475a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004762:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	68fa      	ldr	r2, [r7, #12]
 8004770:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2220      	movs	r2, #32
 8004776:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	3714      	adds	r7, #20
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d101      	bne.n	80047a8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80047a4:	2302      	movs	r3, #2
 80047a6:	e02d      	b.n	8004804 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2224      	movs	r2, #36	@ 0x24
 80047b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f022 0201 	bic.w	r2, r2, #1
 80047ce:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	683a      	ldr	r2, [r7, #0]
 80047e0:	430a      	orrs	r2, r1
 80047e2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f000 f8a3 	bl	8004930 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2220      	movs	r2, #32
 80047f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	3710      	adds	r7, #16
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800481c:	2b01      	cmp	r3, #1
 800481e:	d101      	bne.n	8004824 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004820:	2302      	movs	r3, #2
 8004822:	e02d      	b.n	8004880 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2224      	movs	r2, #36	@ 0x24
 8004830:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f022 0201 	bic.w	r2, r2, #1
 800484a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	683a      	ldr	r2, [r7, #0]
 800485c:	430a      	orrs	r2, r1
 800485e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f000 f865 	bl	8004930 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68fa      	ldr	r2, [r7, #12]
 800486c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2220      	movs	r2, #32
 8004872:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800487e:	2300      	movs	r3, #0
}
 8004880:	4618      	mov	r0, r3
 8004882:	3710      	adds	r7, #16
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b08c      	sub	sp, #48	@ 0x30
 800488c:	af00      	add	r7, sp, #0
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	4613      	mov	r3, r2
 8004894:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800489c:	2b20      	cmp	r3, #32
 800489e:	d142      	bne.n	8004926 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d002      	beq.n	80048ac <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 80048a6:	88fb      	ldrh	r3, [r7, #6]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d101      	bne.n	80048b0 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e03b      	b.n	8004928 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2201      	movs	r2, #1
 80048b4:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2200      	movs	r2, #0
 80048ba:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80048bc:	88fb      	ldrh	r3, [r7, #6]
 80048be:	461a      	mov	r2, r3
 80048c0:	68b9      	ldr	r1, [r7, #8]
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	f7ff fc8a 	bl	80041dc <UART_Start_Receive_DMA>
 80048c8:	4603      	mov	r3, r0
 80048ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80048ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d124      	bne.n	8004920 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d11d      	bne.n	800491a <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2210      	movs	r2, #16
 80048e4:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	e853 3f00 	ldrex	r3, [r3]
 80048f2:	617b      	str	r3, [r7, #20]
   return(result);
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	f043 0310 	orr.w	r3, r3, #16
 80048fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	461a      	mov	r2, r3
 8004902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004904:	627b      	str	r3, [r7, #36]	@ 0x24
 8004906:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004908:	6a39      	ldr	r1, [r7, #32]
 800490a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800490c:	e841 2300 	strex	r3, r2, [r1]
 8004910:	61fb      	str	r3, [r7, #28]
   return(result);
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d1e6      	bne.n	80048e6 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8004918:	e002      	b.n	8004920 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8004920:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004924:	e000      	b.n	8004928 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004926:	2302      	movs	r3, #2
  }
}
 8004928:	4618      	mov	r0, r3
 800492a:	3730      	adds	r7, #48	@ 0x30
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004930:	b480      	push	{r7}
 8004932:	b085      	sub	sp, #20
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800493c:	2b00      	cmp	r3, #0
 800493e:	d108      	bne.n	8004952 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004950:	e031      	b.n	80049b6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004952:	2308      	movs	r3, #8
 8004954:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004956:	2308      	movs	r3, #8
 8004958:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	0e5b      	lsrs	r3, r3, #25
 8004962:	b2db      	uxtb	r3, r3
 8004964:	f003 0307 	and.w	r3, r3, #7
 8004968:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	0f5b      	lsrs	r3, r3, #29
 8004972:	b2db      	uxtb	r3, r3
 8004974:	f003 0307 	and.w	r3, r3, #7
 8004978:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800497a:	7bbb      	ldrb	r3, [r7, #14]
 800497c:	7b3a      	ldrb	r2, [r7, #12]
 800497e:	4911      	ldr	r1, [pc, #68]	@ (80049c4 <UARTEx_SetNbDataToProcess+0x94>)
 8004980:	5c8a      	ldrb	r2, [r1, r2]
 8004982:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004986:	7b3a      	ldrb	r2, [r7, #12]
 8004988:	490f      	ldr	r1, [pc, #60]	@ (80049c8 <UARTEx_SetNbDataToProcess+0x98>)
 800498a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800498c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004990:	b29a      	uxth	r2, r3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004998:	7bfb      	ldrb	r3, [r7, #15]
 800499a:	7b7a      	ldrb	r2, [r7, #13]
 800499c:	4909      	ldr	r1, [pc, #36]	@ (80049c4 <UARTEx_SetNbDataToProcess+0x94>)
 800499e:	5c8a      	ldrb	r2, [r1, r2]
 80049a0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80049a4:	7b7a      	ldrb	r2, [r7, #13]
 80049a6:	4908      	ldr	r1, [pc, #32]	@ (80049c8 <UARTEx_SetNbDataToProcess+0x98>)
 80049a8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80049aa:	fb93 f3f2 	sdiv	r3, r3, r2
 80049ae:	b29a      	uxth	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80049b6:	bf00      	nop
 80049b8:	3714      	adds	r7, #20
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
 80049c2:	bf00      	nop
 80049c4:	08004abc 	.word	0x08004abc
 80049c8:	08004ac4 	.word	0x08004ac4

080049cc <memset>:
 80049cc:	4402      	add	r2, r0
 80049ce:	4603      	mov	r3, r0
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d100      	bne.n	80049d6 <memset+0xa>
 80049d4:	4770      	bx	lr
 80049d6:	f803 1b01 	strb.w	r1, [r3], #1
 80049da:	e7f9      	b.n	80049d0 <memset+0x4>

080049dc <__libc_init_array>:
 80049dc:	b570      	push	{r4, r5, r6, lr}
 80049de:	4d0d      	ldr	r5, [pc, #52]	@ (8004a14 <__libc_init_array+0x38>)
 80049e0:	4c0d      	ldr	r4, [pc, #52]	@ (8004a18 <__libc_init_array+0x3c>)
 80049e2:	1b64      	subs	r4, r4, r5
 80049e4:	10a4      	asrs	r4, r4, #2
 80049e6:	2600      	movs	r6, #0
 80049e8:	42a6      	cmp	r6, r4
 80049ea:	d109      	bne.n	8004a00 <__libc_init_array+0x24>
 80049ec:	4d0b      	ldr	r5, [pc, #44]	@ (8004a1c <__libc_init_array+0x40>)
 80049ee:	4c0c      	ldr	r4, [pc, #48]	@ (8004a20 <__libc_init_array+0x44>)
 80049f0:	f000 f826 	bl	8004a40 <_init>
 80049f4:	1b64      	subs	r4, r4, r5
 80049f6:	10a4      	asrs	r4, r4, #2
 80049f8:	2600      	movs	r6, #0
 80049fa:	42a6      	cmp	r6, r4
 80049fc:	d105      	bne.n	8004a0a <__libc_init_array+0x2e>
 80049fe:	bd70      	pop	{r4, r5, r6, pc}
 8004a00:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a04:	4798      	blx	r3
 8004a06:	3601      	adds	r6, #1
 8004a08:	e7ee      	b.n	80049e8 <__libc_init_array+0xc>
 8004a0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a0e:	4798      	blx	r3
 8004a10:	3601      	adds	r6, #1
 8004a12:	e7f2      	b.n	80049fa <__libc_init_array+0x1e>
 8004a14:	08004ad4 	.word	0x08004ad4
 8004a18:	08004ad4 	.word	0x08004ad4
 8004a1c:	08004ad4 	.word	0x08004ad4
 8004a20:	08004ad8 	.word	0x08004ad8

08004a24 <memcpy>:
 8004a24:	440a      	add	r2, r1
 8004a26:	4291      	cmp	r1, r2
 8004a28:	f100 33ff 	add.w	r3, r0, #4294967295
 8004a2c:	d100      	bne.n	8004a30 <memcpy+0xc>
 8004a2e:	4770      	bx	lr
 8004a30:	b510      	push	{r4, lr}
 8004a32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a3a:	4291      	cmp	r1, r2
 8004a3c:	d1f9      	bne.n	8004a32 <memcpy+0xe>
 8004a3e:	bd10      	pop	{r4, pc}

08004a40 <_init>:
 8004a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a42:	bf00      	nop
 8004a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a46:	bc08      	pop	{r3}
 8004a48:	469e      	mov	lr, r3
 8004a4a:	4770      	bx	lr

08004a4c <_fini>:
 8004a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a4e:	bf00      	nop
 8004a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a52:	bc08      	pop	{r3}
 8004a54:	469e      	mov	lr, r3
 8004a56:	4770      	bx	lr
